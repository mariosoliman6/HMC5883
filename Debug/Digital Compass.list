
Digital Compass.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034d4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  080035e0  080035e0  000135e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003670  08003670  000200a4  2**0
                  CONTENTS
  4 .ARM          00000000  08003670  08003670  000200a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003670  08003670  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003670  08003670  00013670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003674  08003674  00013674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08003678  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  200000a4  0800371c  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ac  0800371c  000201ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aaa5  00000000  00000000  000200cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000186a  00000000  00000000  0002ab72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000978  00000000  00000000  0002c3e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008e8  00000000  00000000  0002cd58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017183  00000000  00000000  0002d640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c449  00000000  00000000  000447c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000842d0  00000000  00000000  00050c0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d4edc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a8c  00000000  00000000  000d4f2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000a4 	.word	0x200000a4
 8000128:	00000000 	.word	0x00000000
 800012c:	080035c8 	.word	0x080035c8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a8 	.word	0x200000a8
 8000148:	080035c8 	.word	0x080035c8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <I2C_Write>:

#include "HMC5883_HwInterface.h"

extern I2C_HandleTypeDef hi2c1;

uint8_t I2C_Write(uint8_t SlA, uint8_t *Data, uint8_t Len) {
 800015c:	b580      	push	{r7, lr}
 800015e:	b086      	sub	sp, #24
 8000160:	af02      	add	r7, sp, #8
 8000162:	4603      	mov	r3, r0
 8000164:	6039      	str	r1, [r7, #0]
 8000166:	71fb      	strb	r3, [r7, #7]
 8000168:	4613      	mov	r3, r2
 800016a:	71bb      	strb	r3, [r7, #6]

	HAL_StatusTypeDef HAL_ERROR = HAL_I2C_Master_Transmit(&hi2c1, SlA << 1,
 800016c:	79fb      	ldrb	r3, [r7, #7]
 800016e:	b29b      	uxth	r3, r3
 8000170:	005b      	lsls	r3, r3, #1
 8000172:	b299      	uxth	r1, r3
 8000174:	79bb      	ldrb	r3, [r7, #6]
 8000176:	b29b      	uxth	r3, r3
 8000178:	2264      	movs	r2, #100	; 0x64
 800017a:	9200      	str	r2, [sp, #0]
 800017c:	683a      	ldr	r2, [r7, #0]
 800017e:	4807      	ldr	r0, [pc, #28]	; (800019c <I2C_Write+0x40>)
 8000180:	f000 ffba 	bl	80010f8 <HAL_I2C_Master_Transmit>
 8000184:	4603      	mov	r3, r0
 8000186:	73fb      	strb	r3, [r7, #15]
			Data, Len, 100);

	return (HAL_ERROR == HAL_OK ? 0 : 1);
 8000188:	7bfb      	ldrb	r3, [r7, #15]
 800018a:	2b00      	cmp	r3, #0
 800018c:	bf14      	ite	ne
 800018e:	2301      	movne	r3, #1
 8000190:	2300      	moveq	r3, #0
 8000192:	b2db      	uxtb	r3, r3
}
 8000194:	4618      	mov	r0, r3
 8000196:	3710      	adds	r7, #16
 8000198:	46bd      	mov	sp, r7
 800019a:	bd80      	pop	{r7, pc}
 800019c:	200000c0 	.word	0x200000c0

080001a0 <I2C_Read>:

uint8_t I2C_Read(uint8_t SlA, uint8_t *Data, uint8_t Len) {
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b086      	sub	sp, #24
 80001a4:	af02      	add	r7, sp, #8
 80001a6:	4603      	mov	r3, r0
 80001a8:	6039      	str	r1, [r7, #0]
 80001aa:	71fb      	strb	r3, [r7, #7]
 80001ac:	4613      	mov	r3, r2
 80001ae:	71bb      	strb	r3, [r7, #6]

	HAL_StatusTypeDef HAL_ERROR = HAL_I2C_Master_Receive(&hi2c1, SlA << 1, Data,
 80001b0:	79fb      	ldrb	r3, [r7, #7]
 80001b2:	b29b      	uxth	r3, r3
 80001b4:	005b      	lsls	r3, r3, #1
 80001b6:	b299      	uxth	r1, r3
 80001b8:	79bb      	ldrb	r3, [r7, #6]
 80001ba:	b29b      	uxth	r3, r3
 80001bc:	2264      	movs	r2, #100	; 0x64
 80001be:	9200      	str	r2, [sp, #0]
 80001c0:	683a      	ldr	r2, [r7, #0]
 80001c2:	4807      	ldr	r0, [pc, #28]	; (80001e0 <I2C_Read+0x40>)
 80001c4:	f001 f896 	bl	80012f4 <HAL_I2C_Master_Receive>
 80001c8:	4603      	mov	r3, r0
 80001ca:	73fb      	strb	r3, [r7, #15]
			Len, 100);

	return (HAL_ERROR == HAL_OK ? 0 : 1);
 80001cc:	7bfb      	ldrb	r3, [r7, #15]
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	bf14      	ite	ne
 80001d2:	2301      	movne	r3, #1
 80001d4:	2300      	moveq	r3, #0
 80001d6:	b2db      	uxtb	r3, r3
}
 80001d8:	4618      	mov	r0, r3
 80001da:	3710      	adds	r7, #16
 80001dc:	46bd      	mov	sp, r7
 80001de:	bd80      	pop	{r7, pc}
 80001e0:	200000c0 	.word	0x200000c0

080001e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001e4:	b590      	push	{r4, r7, lr}
 80001e6:	b0b7      	sub	sp, #220	; 0xdc
 80001e8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ea:	f000 fb53 	bl	8000894 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001ee:	f000 f845 	bl	800027c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001f2:	f000 f8e1 	bl	80003b8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80001f6:	f000 f887 	bl	8000308 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80001fa:	f000 f8b3 	bl	8000364 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HMC5883_Stat_t L;
  uint16_t Buffer[100];
  uint8_t len;
  HMC5883_Init(&Compass);
 80001fe:	481a      	ldr	r0, [pc, #104]	; (8000268 <main+0x84>)
 8000200:	f000 fa62 	bl	80006c8 <HMC5883_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  L = HMC5883_Get_Readings(&Compass);
 8000204:	4818      	ldr	r0, [pc, #96]	; (8000268 <main+0x84>)
 8000206:	f000 fa95 	bl	8000734 <HMC5883_Get_Readings>
 800020a:	4603      	mov	r3, r0
 800020c:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf

	  len= sprintf(Buffer,"Compass: %s, X: %d , Y: %d , Z: %d\n\r ",
 8000210:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8000214:	2b00      	cmp	r3, #0
 8000216:	d101      	bne.n	800021c <main+0x38>
 8000218:	4a14      	ldr	r2, [pc, #80]	; (800026c <main+0x88>)
 800021a:	e000      	b.n	800021e <main+0x3a>
 800021c:	4a14      	ldr	r2, [pc, #80]	; (8000270 <main+0x8c>)
	  	                        L == HMC5883_OK ? "OK" : "NOK",
	  	                        Compass.X_Output_Data,
 800021e:	4b12      	ldr	r3, [pc, #72]	; (8000268 <main+0x84>)
 8000220:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
	  len= sprintf(Buffer,"Compass: %s, X: %d , Y: %d , Z: %d\n\r ",
 8000224:	461c      	mov	r4, r3
	  	                        Compass.Y_Output_Data,
 8000226:	4b10      	ldr	r3, [pc, #64]	; (8000268 <main+0x84>)
 8000228:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
	  len= sprintf(Buffer,"Compass: %s, X: %d , Y: %d , Z: %d\n\r ",
 800022c:	4619      	mov	r1, r3
	  	                        Compass.Z_Output_Data);
 800022e:	4b0e      	ldr	r3, [pc, #56]	; (8000268 <main+0x84>)
 8000230:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
	  len= sprintf(Buffer,"Compass: %s, X: %d , Y: %d , Z: %d\n\r ",
 8000234:	1d38      	adds	r0, r7, #4
 8000236:	9301      	str	r3, [sp, #4]
 8000238:	9100      	str	r1, [sp, #0]
 800023a:	4623      	mov	r3, r4
 800023c:	490d      	ldr	r1, [pc, #52]	; (8000274 <main+0x90>)
 800023e:	f002 fd49 	bl	8002cd4 <siprintf>
 8000242:	4603      	mov	r3, r0
 8000244:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce

	  HAL_UART_Transmit(&huart1, Buffer, strlen(Buffer), 100);
 8000248:	1d3b      	adds	r3, r7, #4
 800024a:	4618      	mov	r0, r3
 800024c:	f7ff ff7e 	bl	800014c <strlen>
 8000250:	4603      	mov	r3, r0
 8000252:	b29a      	uxth	r2, r3
 8000254:	1d39      	adds	r1, r7, #4
 8000256:	2364      	movs	r3, #100	; 0x64
 8000258:	4807      	ldr	r0, [pc, #28]	; (8000278 <main+0x94>)
 800025a:	f002 faab 	bl	80027b4 <HAL_UART_Transmit>
	  	  HAL_Delay(1000);
 800025e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000262:	f000 fb79 	bl	8000958 <HAL_Delay>
  {
 8000266:	e7cd      	b.n	8000204 <main+0x20>
 8000268:	20000000 	.word	0x20000000
 800026c:	080035e0 	.word	0x080035e0
 8000270:	080035e4 	.word	0x080035e4
 8000274:	080035e8 	.word	0x080035e8
 8000278:	20000114 	.word	0x20000114

0800027c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b090      	sub	sp, #64	; 0x40
 8000280:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000282:	f107 0318 	add.w	r3, r7, #24
 8000286:	2228      	movs	r2, #40	; 0x28
 8000288:	2100      	movs	r1, #0
 800028a:	4618      	mov	r0, r3
 800028c:	f002 fd1a 	bl	8002cc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000290:	1d3b      	adds	r3, r7, #4
 8000292:	2200      	movs	r2, #0
 8000294:	601a      	str	r2, [r3, #0]
 8000296:	605a      	str	r2, [r3, #4]
 8000298:	609a      	str	r2, [r3, #8]
 800029a:	60da      	str	r2, [r3, #12]
 800029c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800029e:	2301      	movs	r3, #1
 80002a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002a8:	2300      	movs	r3, #0
 80002aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ac:	2301      	movs	r3, #1
 80002ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002b0:	2302      	movs	r3, #2
 80002b2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002ba:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002be:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002c0:	f107 0318 	add.w	r3, r7, #24
 80002c4:	4618      	mov	r0, r3
 80002c6:	f001 fe07 	bl	8001ed8 <HAL_RCC_OscConfig>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d001      	beq.n	80002d4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002d0:	f000 f8a0 	bl	8000414 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002d4:	230f      	movs	r3, #15
 80002d6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002d8:	2302      	movs	r3, #2
 80002da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002dc:	2300      	movs	r3, #0
 80002de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002e6:	2300      	movs	r3, #0
 80002e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	2102      	movs	r1, #2
 80002ee:	4618      	mov	r0, r3
 80002f0:	f002 f874 	bl	80023dc <HAL_RCC_ClockConfig>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002fa:	f000 f88b 	bl	8000414 <Error_Handler>
  }
}
 80002fe:	bf00      	nop
 8000300:	3740      	adds	r7, #64	; 0x40
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}
	...

08000308 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800030c:	4b12      	ldr	r3, [pc, #72]	; (8000358 <MX_I2C1_Init+0x50>)
 800030e:	4a13      	ldr	r2, [pc, #76]	; (800035c <MX_I2C1_Init+0x54>)
 8000310:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000312:	4b11      	ldr	r3, [pc, #68]	; (8000358 <MX_I2C1_Init+0x50>)
 8000314:	4a12      	ldr	r2, [pc, #72]	; (8000360 <MX_I2C1_Init+0x58>)
 8000316:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000318:	4b0f      	ldr	r3, [pc, #60]	; (8000358 <MX_I2C1_Init+0x50>)
 800031a:	2200      	movs	r2, #0
 800031c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800031e:	4b0e      	ldr	r3, [pc, #56]	; (8000358 <MX_I2C1_Init+0x50>)
 8000320:	2200      	movs	r2, #0
 8000322:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000324:	4b0c      	ldr	r3, [pc, #48]	; (8000358 <MX_I2C1_Init+0x50>)
 8000326:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800032a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800032c:	4b0a      	ldr	r3, [pc, #40]	; (8000358 <MX_I2C1_Init+0x50>)
 800032e:	2200      	movs	r2, #0
 8000330:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000332:	4b09      	ldr	r3, [pc, #36]	; (8000358 <MX_I2C1_Init+0x50>)
 8000334:	2200      	movs	r2, #0
 8000336:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000338:	4b07      	ldr	r3, [pc, #28]	; (8000358 <MX_I2C1_Init+0x50>)
 800033a:	2200      	movs	r2, #0
 800033c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800033e:	4b06      	ldr	r3, [pc, #24]	; (8000358 <MX_I2C1_Init+0x50>)
 8000340:	2200      	movs	r2, #0
 8000342:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000344:	4804      	ldr	r0, [pc, #16]	; (8000358 <MX_I2C1_Init+0x50>)
 8000346:	f000 fd93 	bl	8000e70 <HAL_I2C_Init>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d001      	beq.n	8000354 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000350:	f000 f860 	bl	8000414 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000354:	bf00      	nop
 8000356:	bd80      	pop	{r7, pc}
 8000358:	200000c0 	.word	0x200000c0
 800035c:	40005400 	.word	0x40005400
 8000360:	000186a0 	.word	0x000186a0

08000364 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000368:	4b11      	ldr	r3, [pc, #68]	; (80003b0 <MX_USART1_UART_Init+0x4c>)
 800036a:	4a12      	ldr	r2, [pc, #72]	; (80003b4 <MX_USART1_UART_Init+0x50>)
 800036c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800036e:	4b10      	ldr	r3, [pc, #64]	; (80003b0 <MX_USART1_UART_Init+0x4c>)
 8000370:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000374:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000376:	4b0e      	ldr	r3, [pc, #56]	; (80003b0 <MX_USART1_UART_Init+0x4c>)
 8000378:	2200      	movs	r2, #0
 800037a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800037c:	4b0c      	ldr	r3, [pc, #48]	; (80003b0 <MX_USART1_UART_Init+0x4c>)
 800037e:	2200      	movs	r2, #0
 8000380:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000382:	4b0b      	ldr	r3, [pc, #44]	; (80003b0 <MX_USART1_UART_Init+0x4c>)
 8000384:	2200      	movs	r2, #0
 8000386:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000388:	4b09      	ldr	r3, [pc, #36]	; (80003b0 <MX_USART1_UART_Init+0x4c>)
 800038a:	220c      	movs	r2, #12
 800038c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800038e:	4b08      	ldr	r3, [pc, #32]	; (80003b0 <MX_USART1_UART_Init+0x4c>)
 8000390:	2200      	movs	r2, #0
 8000392:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000394:	4b06      	ldr	r3, [pc, #24]	; (80003b0 <MX_USART1_UART_Init+0x4c>)
 8000396:	2200      	movs	r2, #0
 8000398:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800039a:	4805      	ldr	r0, [pc, #20]	; (80003b0 <MX_USART1_UART_Init+0x4c>)
 800039c:	f002 f9ac 	bl	80026f8 <HAL_UART_Init>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d001      	beq.n	80003aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003a6:	f000 f835 	bl	8000414 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003aa:	bf00      	nop
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	20000114 	.word	0x20000114
 80003b4:	40013800 	.word	0x40013800

080003b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003b8:	b480      	push	{r7}
 80003ba:	b085      	sub	sp, #20
 80003bc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003be:	4b14      	ldr	r3, [pc, #80]	; (8000410 <MX_GPIO_Init+0x58>)
 80003c0:	699b      	ldr	r3, [r3, #24]
 80003c2:	4a13      	ldr	r2, [pc, #76]	; (8000410 <MX_GPIO_Init+0x58>)
 80003c4:	f043 0320 	orr.w	r3, r3, #32
 80003c8:	6193      	str	r3, [r2, #24]
 80003ca:	4b11      	ldr	r3, [pc, #68]	; (8000410 <MX_GPIO_Init+0x58>)
 80003cc:	699b      	ldr	r3, [r3, #24]
 80003ce:	f003 0320 	and.w	r3, r3, #32
 80003d2:	60fb      	str	r3, [r7, #12]
 80003d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003d6:	4b0e      	ldr	r3, [pc, #56]	; (8000410 <MX_GPIO_Init+0x58>)
 80003d8:	699b      	ldr	r3, [r3, #24]
 80003da:	4a0d      	ldr	r2, [pc, #52]	; (8000410 <MX_GPIO_Init+0x58>)
 80003dc:	f043 0304 	orr.w	r3, r3, #4
 80003e0:	6193      	str	r3, [r2, #24]
 80003e2:	4b0b      	ldr	r3, [pc, #44]	; (8000410 <MX_GPIO_Init+0x58>)
 80003e4:	699b      	ldr	r3, [r3, #24]
 80003e6:	f003 0304 	and.w	r3, r3, #4
 80003ea:	60bb      	str	r3, [r7, #8]
 80003ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003ee:	4b08      	ldr	r3, [pc, #32]	; (8000410 <MX_GPIO_Init+0x58>)
 80003f0:	699b      	ldr	r3, [r3, #24]
 80003f2:	4a07      	ldr	r2, [pc, #28]	; (8000410 <MX_GPIO_Init+0x58>)
 80003f4:	f043 0308 	orr.w	r3, r3, #8
 80003f8:	6193      	str	r3, [r2, #24]
 80003fa:	4b05      	ldr	r3, [pc, #20]	; (8000410 <MX_GPIO_Init+0x58>)
 80003fc:	699b      	ldr	r3, [r3, #24]
 80003fe:	f003 0308 	and.w	r3, r3, #8
 8000402:	607b      	str	r3, [r7, #4]
 8000404:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000406:	bf00      	nop
 8000408:	3714      	adds	r7, #20
 800040a:	46bd      	mov	sp, r7
 800040c:	bc80      	pop	{r7}
 800040e:	4770      	bx	lr
 8000410:	40021000 	.word	0x40021000

08000414 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000418:	b672      	cpsid	i
}
 800041a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800041c:	e7fe      	b.n	800041c <Error_Handler+0x8>
	...

08000420 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000420:	b480      	push	{r7}
 8000422:	b085      	sub	sp, #20
 8000424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000426:	4b15      	ldr	r3, [pc, #84]	; (800047c <HAL_MspInit+0x5c>)
 8000428:	699b      	ldr	r3, [r3, #24]
 800042a:	4a14      	ldr	r2, [pc, #80]	; (800047c <HAL_MspInit+0x5c>)
 800042c:	f043 0301 	orr.w	r3, r3, #1
 8000430:	6193      	str	r3, [r2, #24]
 8000432:	4b12      	ldr	r3, [pc, #72]	; (800047c <HAL_MspInit+0x5c>)
 8000434:	699b      	ldr	r3, [r3, #24]
 8000436:	f003 0301 	and.w	r3, r3, #1
 800043a:	60bb      	str	r3, [r7, #8]
 800043c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800043e:	4b0f      	ldr	r3, [pc, #60]	; (800047c <HAL_MspInit+0x5c>)
 8000440:	69db      	ldr	r3, [r3, #28]
 8000442:	4a0e      	ldr	r2, [pc, #56]	; (800047c <HAL_MspInit+0x5c>)
 8000444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000448:	61d3      	str	r3, [r2, #28]
 800044a:	4b0c      	ldr	r3, [pc, #48]	; (800047c <HAL_MspInit+0x5c>)
 800044c:	69db      	ldr	r3, [r3, #28]
 800044e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000452:	607b      	str	r3, [r7, #4]
 8000454:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000456:	4b0a      	ldr	r3, [pc, #40]	; (8000480 <HAL_MspInit+0x60>)
 8000458:	685b      	ldr	r3, [r3, #4]
 800045a:	60fb      	str	r3, [r7, #12]
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000462:	60fb      	str	r3, [r7, #12]
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800046a:	60fb      	str	r3, [r7, #12]
 800046c:	4a04      	ldr	r2, [pc, #16]	; (8000480 <HAL_MspInit+0x60>)
 800046e:	68fb      	ldr	r3, [r7, #12]
 8000470:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000472:	bf00      	nop
 8000474:	3714      	adds	r7, #20
 8000476:	46bd      	mov	sp, r7
 8000478:	bc80      	pop	{r7}
 800047a:	4770      	bx	lr
 800047c:	40021000 	.word	0x40021000
 8000480:	40010000 	.word	0x40010000

08000484 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b088      	sub	sp, #32
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800048c:	f107 0310 	add.w	r3, r7, #16
 8000490:	2200      	movs	r2, #0
 8000492:	601a      	str	r2, [r3, #0]
 8000494:	605a      	str	r2, [r3, #4]
 8000496:	609a      	str	r2, [r3, #8]
 8000498:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	4a15      	ldr	r2, [pc, #84]	; (80004f4 <HAL_I2C_MspInit+0x70>)
 80004a0:	4293      	cmp	r3, r2
 80004a2:	d123      	bne.n	80004ec <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004a4:	4b14      	ldr	r3, [pc, #80]	; (80004f8 <HAL_I2C_MspInit+0x74>)
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	4a13      	ldr	r2, [pc, #76]	; (80004f8 <HAL_I2C_MspInit+0x74>)
 80004aa:	f043 0308 	orr.w	r3, r3, #8
 80004ae:	6193      	str	r3, [r2, #24]
 80004b0:	4b11      	ldr	r3, [pc, #68]	; (80004f8 <HAL_I2C_MspInit+0x74>)
 80004b2:	699b      	ldr	r3, [r3, #24]
 80004b4:	f003 0308 	and.w	r3, r3, #8
 80004b8:	60fb      	str	r3, [r7, #12]
 80004ba:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80004bc:	23c0      	movs	r3, #192	; 0xc0
 80004be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004c0:	2312      	movs	r3, #18
 80004c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004c4:	2303      	movs	r3, #3
 80004c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004c8:	f107 0310 	add.w	r3, r7, #16
 80004cc:	4619      	mov	r1, r3
 80004ce:	480b      	ldr	r0, [pc, #44]	; (80004fc <HAL_I2C_MspInit+0x78>)
 80004d0:	f000 fb4a 	bl	8000b68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80004d4:	4b08      	ldr	r3, [pc, #32]	; (80004f8 <HAL_I2C_MspInit+0x74>)
 80004d6:	69db      	ldr	r3, [r3, #28]
 80004d8:	4a07      	ldr	r2, [pc, #28]	; (80004f8 <HAL_I2C_MspInit+0x74>)
 80004da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004de:	61d3      	str	r3, [r2, #28]
 80004e0:	4b05      	ldr	r3, [pc, #20]	; (80004f8 <HAL_I2C_MspInit+0x74>)
 80004e2:	69db      	ldr	r3, [r3, #28]
 80004e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80004e8:	60bb      	str	r3, [r7, #8]
 80004ea:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80004ec:	bf00      	nop
 80004ee:	3720      	adds	r7, #32
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	40005400 	.word	0x40005400
 80004f8:	40021000 	.word	0x40021000
 80004fc:	40010c00 	.word	0x40010c00

08000500 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b088      	sub	sp, #32
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000508:	f107 0310 	add.w	r3, r7, #16
 800050c:	2200      	movs	r2, #0
 800050e:	601a      	str	r2, [r3, #0]
 8000510:	605a      	str	r2, [r3, #4]
 8000512:	609a      	str	r2, [r3, #8]
 8000514:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	4a1c      	ldr	r2, [pc, #112]	; (800058c <HAL_UART_MspInit+0x8c>)
 800051c:	4293      	cmp	r3, r2
 800051e:	d131      	bne.n	8000584 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000520:	4b1b      	ldr	r3, [pc, #108]	; (8000590 <HAL_UART_MspInit+0x90>)
 8000522:	699b      	ldr	r3, [r3, #24]
 8000524:	4a1a      	ldr	r2, [pc, #104]	; (8000590 <HAL_UART_MspInit+0x90>)
 8000526:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800052a:	6193      	str	r3, [r2, #24]
 800052c:	4b18      	ldr	r3, [pc, #96]	; (8000590 <HAL_UART_MspInit+0x90>)
 800052e:	699b      	ldr	r3, [r3, #24]
 8000530:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000534:	60fb      	str	r3, [r7, #12]
 8000536:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000538:	4b15      	ldr	r3, [pc, #84]	; (8000590 <HAL_UART_MspInit+0x90>)
 800053a:	699b      	ldr	r3, [r3, #24]
 800053c:	4a14      	ldr	r2, [pc, #80]	; (8000590 <HAL_UART_MspInit+0x90>)
 800053e:	f043 0304 	orr.w	r3, r3, #4
 8000542:	6193      	str	r3, [r2, #24]
 8000544:	4b12      	ldr	r3, [pc, #72]	; (8000590 <HAL_UART_MspInit+0x90>)
 8000546:	699b      	ldr	r3, [r3, #24]
 8000548:	f003 0304 	and.w	r3, r3, #4
 800054c:	60bb      	str	r3, [r7, #8]
 800054e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000550:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000554:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000556:	2302      	movs	r3, #2
 8000558:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800055a:	2303      	movs	r3, #3
 800055c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800055e:	f107 0310 	add.w	r3, r7, #16
 8000562:	4619      	mov	r1, r3
 8000564:	480b      	ldr	r0, [pc, #44]	; (8000594 <HAL_UART_MspInit+0x94>)
 8000566:	f000 faff 	bl	8000b68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800056a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800056e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000570:	2300      	movs	r3, #0
 8000572:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000574:	2300      	movs	r3, #0
 8000576:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000578:	f107 0310 	add.w	r3, r7, #16
 800057c:	4619      	mov	r1, r3
 800057e:	4805      	ldr	r0, [pc, #20]	; (8000594 <HAL_UART_MspInit+0x94>)
 8000580:	f000 faf2 	bl	8000b68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000584:	bf00      	nop
 8000586:	3720      	adds	r7, #32
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	40013800 	.word	0x40013800
 8000590:	40021000 	.word	0x40021000
 8000594:	40010800 	.word	0x40010800

08000598 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800059c:	e7fe      	b.n	800059c <NMI_Handler+0x4>

0800059e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800059e:	b480      	push	{r7}
 80005a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005a2:	e7fe      	b.n	80005a2 <HardFault_Handler+0x4>

080005a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005a8:	e7fe      	b.n	80005a8 <MemManage_Handler+0x4>

080005aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005aa:	b480      	push	{r7}
 80005ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005ae:	e7fe      	b.n	80005ae <BusFault_Handler+0x4>

080005b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005b4:	e7fe      	b.n	80005b4 <UsageFault_Handler+0x4>

080005b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005b6:	b480      	push	{r7}
 80005b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005ba:	bf00      	nop
 80005bc:	46bd      	mov	sp, r7
 80005be:	bc80      	pop	{r7}
 80005c0:	4770      	bx	lr

080005c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005c2:	b480      	push	{r7}
 80005c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005c6:	bf00      	nop
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bc80      	pop	{r7}
 80005cc:	4770      	bx	lr

080005ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005ce:	b480      	push	{r7}
 80005d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005d2:	bf00      	nop
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bc80      	pop	{r7}
 80005d8:	4770      	bx	lr

080005da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005da:	b580      	push	{r7, lr}
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005de:	f000 f99f 	bl	8000920 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005e2:	bf00      	nop
 80005e4:	bd80      	pop	{r7, pc}
	...

080005e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b086      	sub	sp, #24
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005f0:	4a14      	ldr	r2, [pc, #80]	; (8000644 <_sbrk+0x5c>)
 80005f2:	4b15      	ldr	r3, [pc, #84]	; (8000648 <_sbrk+0x60>)
 80005f4:	1ad3      	subs	r3, r2, r3
 80005f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005f8:	697b      	ldr	r3, [r7, #20]
 80005fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005fc:	4b13      	ldr	r3, [pc, #76]	; (800064c <_sbrk+0x64>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d102      	bne.n	800060a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000604:	4b11      	ldr	r3, [pc, #68]	; (800064c <_sbrk+0x64>)
 8000606:	4a12      	ldr	r2, [pc, #72]	; (8000650 <_sbrk+0x68>)
 8000608:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800060a:	4b10      	ldr	r3, [pc, #64]	; (800064c <_sbrk+0x64>)
 800060c:	681a      	ldr	r2, [r3, #0]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	4413      	add	r3, r2
 8000612:	693a      	ldr	r2, [r7, #16]
 8000614:	429a      	cmp	r2, r3
 8000616:	d207      	bcs.n	8000628 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000618:	f002 fb2a 	bl	8002c70 <__errno>
 800061c:	4603      	mov	r3, r0
 800061e:	220c      	movs	r2, #12
 8000620:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000622:	f04f 33ff 	mov.w	r3, #4294967295
 8000626:	e009      	b.n	800063c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000628:	4b08      	ldr	r3, [pc, #32]	; (800064c <_sbrk+0x64>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800062e:	4b07      	ldr	r3, [pc, #28]	; (800064c <_sbrk+0x64>)
 8000630:	681a      	ldr	r2, [r3, #0]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	4413      	add	r3, r2
 8000636:	4a05      	ldr	r2, [pc, #20]	; (800064c <_sbrk+0x64>)
 8000638:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800063a:	68fb      	ldr	r3, [r7, #12]
}
 800063c:	4618      	mov	r0, r3
 800063e:	3718      	adds	r7, #24
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20005000 	.word	0x20005000
 8000648:	00000400 	.word	0x00000400
 800064c:	2000018c 	.word	0x2000018c
 8000650:	200001b0 	.word	0x200001b0

08000654 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000658:	bf00      	nop
 800065a:	46bd      	mov	sp, r7
 800065c:	bc80      	pop	{r7}
 800065e:	4770      	bx	lr

08000660 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000660:	f7ff fff8 	bl	8000654 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000664:	480b      	ldr	r0, [pc, #44]	; (8000694 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000666:	490c      	ldr	r1, [pc, #48]	; (8000698 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000668:	4a0c      	ldr	r2, [pc, #48]	; (800069c <LoopFillZerobss+0x16>)
  movs r3, #0
 800066a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800066c:	e002      	b.n	8000674 <LoopCopyDataInit>

0800066e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800066e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000670:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000672:	3304      	adds	r3, #4

08000674 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000674:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000676:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000678:	d3f9      	bcc.n	800066e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800067a:	4a09      	ldr	r2, [pc, #36]	; (80006a0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800067c:	4c09      	ldr	r4, [pc, #36]	; (80006a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800067e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000680:	e001      	b.n	8000686 <LoopFillZerobss>

08000682 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000682:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000684:	3204      	adds	r2, #4

08000686 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000686:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000688:	d3fb      	bcc.n	8000682 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800068a:	f002 faf7 	bl	8002c7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800068e:	f7ff fda9 	bl	80001e4 <main>
  bx lr
 8000692:	4770      	bx	lr
  ldr r0, =_sdata
 8000694:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000698:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 800069c:	08003678 	.word	0x08003678
  ldr r2, =_sbss
 80006a0:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 80006a4:	200001ac 	.word	0x200001ac

080006a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006a8:	e7fe      	b.n	80006a8 <ADC1_2_IRQHandler>

080006aa <twos_complement_16bit_to_signed>:

uint16_t X;
uint16_t Y;
uint16_t Z;

int16_t twos_complement_16bit_to_signed(int16_t raw_value) {
 80006aa:	b480      	push	{r7}
 80006ac:	b083      	sub	sp, #12
 80006ae:	af00      	add	r7, sp, #0
 80006b0:	4603      	mov	r3, r0
 80006b2:	80fb      	strh	r3, [r7, #6]
    // If the MSB (bit 15) is set, the value is negative
    if (raw_value & 0x8000) {
 80006b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006b8:	2b00      	cmp	r3, #0
        // Convert from two's complement for negative values
        raw_value = raw_value - 0x10000;  // Subtract 2^16 (65536) to get the signed integer
    }

    return raw_value;
 80006ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80006be:	4618      	mov	r0, r3
 80006c0:	370c      	adds	r7, #12
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bc80      	pop	{r7}
 80006c6:	4770      	bx	lr

080006c8 <HMC5883_Init>:

HMC5883_Stat_t HMC5883_Init(HMC5883_t *Compass) {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]

	//Default Configurations
	Compass->Config_A = (0b11110000); //1 bit must be high, 8 samples,(15Hz)Output Data Rate,Normal mode
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	22f0      	movs	r2, #240	; 0xf0
 80006d4:	701a      	strb	r2, [r3, #0]
	Compass->Config_B = (0b00100000);   //Gain =1090(LSB/Gauss), 4 Reserved bits
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2220      	movs	r2, #32
 80006da:	709a      	strb	r2, [r3, #2]
	Compass->Mode_Register = (0b00000000); //6 Reserved bits, Single Measure mood
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	2200      	movs	r2, #0
 80006e0:	711a      	strb	r2, [r3, #4]

	uint8_t OK = 0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	73fb      	strb	r3, [r7, #15]

	Compass->TxBuffer[0] = 0;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	2200      	movs	r2, #0
 80006ea:	75da      	strb	r2, [r3, #23]
	Compass->TxBuffer[1] = Compass->Config_A;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	781a      	ldrb	r2, [r3, #0]
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	761a      	strb	r2, [r3, #24]
	Compass->TxBuffer[2] = Compass->Config_B;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	789a      	ldrb	r2, [r3, #2]
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	765a      	strb	r2, [r3, #25]
	Compass->TxBuffer[3] = Compass->Mode_Register;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	791a      	ldrb	r2, [r3, #4]
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	769a      	strb	r2, [r3, #26]

	//Sending Buffer of default configurations
	OK |= Compass->HMC5883_HWInterface_t.I2C_Write(HMC5883_SLA,
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			Compass->TxBuffer, 4);
 8000708:	687a      	ldr	r2, [r7, #4]
 800070a:	f102 0117 	add.w	r1, r2, #23
	OK |= Compass->HMC5883_HWInterface_t.I2C_Write(HMC5883_SLA,
 800070e:	2204      	movs	r2, #4
 8000710:	201e      	movs	r0, #30
 8000712:	4798      	blx	r3
 8000714:	4603      	mov	r3, r0
 8000716:	461a      	mov	r2, r3
 8000718:	7bfb      	ldrb	r3, [r7, #15]
 800071a:	4313      	orrs	r3, r2
 800071c:	73fb      	strb	r3, [r7, #15]

	//Acknowledgement check
	if (OK) {
 800071e:	7bfb      	ldrb	r3, [r7, #15]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <HMC5883_Init+0x60>
		return (HMC5883_ERROR);
 8000724:	2301      	movs	r3, #1
 8000726:	e000      	b.n	800072a <HMC5883_Init+0x62>

	}

	else {
		return (HMC5883_OK);
 8000728:	2300      	movs	r3, #0
	}

}
 800072a:	4618      	mov	r0, r3
 800072c:	3710      	adds	r7, #16
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
	...

08000734 <HMC5883_Get_Readings>:
		return (HMC5883_OK);
	}

}

HMC5883_Stat_t HMC5883_Get_Readings(HMC5883_t *Compass) {
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]

	uint8_t OK = 0;
 800073c:	2300      	movs	r3, #0
 800073e:	73fb      	strb	r3, [r7, #15]

	Compass->TxBuffer[0] = 0;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	2200      	movs	r2, #0
 8000744:	75da      	strb	r2, [r3, #23]

	OK |= Compass->HMC5883_HWInterface_t.I2C_Write(HMC5883_SLA,
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			Compass->TxBuffer, 1);
 800074a:	687a      	ldr	r2, [r7, #4]
 800074c:	f102 0117 	add.w	r1, r2, #23
	OK |= Compass->HMC5883_HWInterface_t.I2C_Write(HMC5883_SLA,
 8000750:	2201      	movs	r2, #1
 8000752:	201e      	movs	r0, #30
 8000754:	4798      	blx	r3
 8000756:	4603      	mov	r3, r0
 8000758:	461a      	mov	r2, r3
 800075a:	7bfb      	ldrb	r3, [r7, #15]
 800075c:	4313      	orrs	r3, r2
 800075e:	73fb      	strb	r3, [r7, #15]

	OK |= Compass->HMC5883_HWInterface_t.I2C_Read(HMC5883_SLA,
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
			Compass->RxBuffer, 13);
 8000764:	687a      	ldr	r2, [r7, #4]
 8000766:	f102 011b 	add.w	r1, r2, #27
	OK |= Compass->HMC5883_HWInterface_t.I2C_Read(HMC5883_SLA,
 800076a:	220d      	movs	r2, #13
 800076c:	201e      	movs	r0, #30
 800076e:	4798      	blx	r3
 8000770:	4603      	mov	r3, r0
 8000772:	461a      	mov	r2, r3
 8000774:	7bfb      	ldrb	r3, [r7, #15]
 8000776:	4313      	orrs	r3, r2
 8000778:	73fb      	strb	r3, [r7, #15]

	Compass->X_MSB_Register = Compass->RxBuffer[3];
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	7f9b      	ldrb	r3, [r3, #30]
 800077e:	b25a      	sxtb	r2, r3
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	721a      	strb	r2, [r3, #8]
	Compass->X_LSB_Register = Compass->RxBuffer[4];
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	7fda      	ldrb	r2, [r3, #31]
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	725a      	strb	r2, [r3, #9]
	X = (Compass->X_MSB_Register << 8) | (Compass->X_LSB_Register);
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8000792:	021b      	lsls	r3, r3, #8
 8000794:	b21a      	sxth	r2, r3
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	7a5b      	ldrb	r3, [r3, #9]
 800079a:	b21b      	sxth	r3, r3
 800079c:	4313      	orrs	r3, r2
 800079e:	b21b      	sxth	r3, r3
 80007a0:	b29a      	uxth	r2, r3
 80007a2:	4b39      	ldr	r3, [pc, #228]	; (8000888 <HMC5883_Get_Readings+0x154>)
 80007a4:	801a      	strh	r2, [r3, #0]

	Compass->X_Output_Data = twos_complement_16bit_to_signed(X);
 80007a6:	4b38      	ldr	r3, [pc, #224]	; (8000888 <HMC5883_Get_Readings+0x154>)
 80007a8:	881b      	ldrh	r3, [r3, #0]
 80007aa:	b21b      	sxth	r3, r3
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff ff7c 	bl	80006aa <twos_complement_16bit_to_signed>
 80007b2:	4603      	mov	r3, r0
 80007b4:	461a      	mov	r2, r3
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	80da      	strh	r2, [r3, #6]


Compass->Y_MSB_Register = Compass->RxBuffer[5];
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80007c0:	b25a      	sxtb	r2, r3
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	731a      	strb	r2, [r3, #12]
Compass->Y_LSB_Register = Compass->RxBuffer[6];
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	735a      	strb	r2, [r3, #13]
Y = (Compass->Y_MSB_Register << 8) | (Compass->Y_LSB_Register);
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80007d6:	021b      	lsls	r3, r3, #8
 80007d8:	b21a      	sxth	r2, r3
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	7b5b      	ldrb	r3, [r3, #13]
 80007de:	b21b      	sxth	r3, r3
 80007e0:	4313      	orrs	r3, r2
 80007e2:	b21b      	sxth	r3, r3
 80007e4:	b29a      	uxth	r2, r3
 80007e6:	4b29      	ldr	r3, [pc, #164]	; (800088c <HMC5883_Get_Readings+0x158>)
 80007e8:	801a      	strh	r2, [r3, #0]

Compass->Y_Output_Data = twos_complement_16bit_to_signed(Y);
 80007ea:	4b28      	ldr	r3, [pc, #160]	; (800088c <HMC5883_Get_Readings+0x158>)
 80007ec:	881b      	ldrh	r3, [r3, #0]
 80007ee:	b21b      	sxth	r3, r3
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff ff5a 	bl	80006aa <twos_complement_16bit_to_signed>
 80007f6:	4603      	mov	r3, r0
 80007f8:	461a      	mov	r2, r3
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	815a      	strh	r2, [r3, #10]

Compass->Z_MSB_Register = Compass->RxBuffer[7];
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8000804:	b25a      	sxtb	r2, r3
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	741a      	strb	r2, [r3, #16]
Compass->Z_LSB_Register = Compass->RxBuffer[8];
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	745a      	strb	r2, [r3, #17]
Z = (Compass->Z_MSB_Register << 8) | (Compass->Z_LSB_Register);
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	f993 3010 	ldrsb.w	r3, [r3, #16]
 800081a:	021b      	lsls	r3, r3, #8
 800081c:	b21a      	sxth	r2, r3
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	7c5b      	ldrb	r3, [r3, #17]
 8000822:	b21b      	sxth	r3, r3
 8000824:	4313      	orrs	r3, r2
 8000826:	b21b      	sxth	r3, r3
 8000828:	b29a      	uxth	r2, r3
 800082a:	4b19      	ldr	r3, [pc, #100]	; (8000890 <HMC5883_Get_Readings+0x15c>)
 800082c:	801a      	strh	r2, [r3, #0]

Compass->Z_Output_Data = twos_complement_16bit_to_signed(Z);
 800082e:	4b18      	ldr	r3, [pc, #96]	; (8000890 <HMC5883_Get_Readings+0x15c>)
 8000830:	881b      	ldrh	r3, [r3, #0]
 8000832:	b21b      	sxth	r3, r3
 8000834:	4618      	mov	r0, r3
 8000836:	f7ff ff38 	bl	80006aa <twos_complement_16bit_to_signed>
 800083a:	4603      	mov	r3, r0
 800083c:	461a      	mov	r2, r3
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	81da      	strh	r2, [r3, #14]

Compass->RDY = Compass->RxBuffer[9];
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000848:	f003 0301 	and.w	r3, r3, #1
 800084c:	b2d9      	uxtb	r1, r3
 800084e:	687a      	ldr	r2, [r7, #4]
 8000850:	7cd3      	ldrb	r3, [r2, #19]
 8000852:	f361 0300 	bfi	r3, r1, #0, #1
 8000856:	74d3      	strb	r3, [r2, #19]

Compass->RDY = Compass->RxBuffer[9] >> 1;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800085e:	085b      	lsrs	r3, r3, #1
 8000860:	b2db      	uxtb	r3, r3
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	b2d9      	uxtb	r1, r3
 8000868:	687a      	ldr	r2, [r7, #4]
 800086a:	7cd3      	ldrb	r3, [r2, #19]
 800086c:	f361 0300 	bfi	r3, r1, #0, #1
 8000870:	74d3      	strb	r3, [r2, #19]

if (OK) {
 8000872:	7bfb      	ldrb	r3, [r7, #15]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <HMC5883_Get_Readings+0x148>
	return (HMC5883_ERROR);
 8000878:	2301      	movs	r3, #1
 800087a:	e000      	b.n	800087e <HMC5883_Get_Readings+0x14a>

}

else {
	return (HMC5883_OK);
 800087c:	2300      	movs	r3, #0
}

}
 800087e:	4618      	mov	r0, r3
 8000880:	3710      	adds	r7, #16
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000190 	.word	0x20000190
 800088c:	20000192 	.word	0x20000192
 8000890:	20000194 	.word	0x20000194

08000894 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000898:	4b08      	ldr	r3, [pc, #32]	; (80008bc <HAL_Init+0x28>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a07      	ldr	r2, [pc, #28]	; (80008bc <HAL_Init+0x28>)
 800089e:	f043 0310 	orr.w	r3, r3, #16
 80008a2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008a4:	2003      	movs	r0, #3
 80008a6:	f000 f92b 	bl	8000b00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008aa:	200f      	movs	r0, #15
 80008ac:	f000 f808 	bl	80008c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008b0:	f7ff fdb6 	bl	8000420 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008b4:	2300      	movs	r3, #0
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40022000 	.word	0x40022000

080008c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008c8:	4b12      	ldr	r3, [pc, #72]	; (8000914 <HAL_InitTick+0x54>)
 80008ca:	681a      	ldr	r2, [r3, #0]
 80008cc:	4b12      	ldr	r3, [pc, #72]	; (8000918 <HAL_InitTick+0x58>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	4619      	mov	r1, r3
 80008d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80008da:	fbb2 f3f3 	udiv	r3, r2, r3
 80008de:	4618      	mov	r0, r3
 80008e0:	f000 f935 	bl	8000b4e <HAL_SYSTICK_Config>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008ea:	2301      	movs	r3, #1
 80008ec:	e00e      	b.n	800090c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	2b0f      	cmp	r3, #15
 80008f2:	d80a      	bhi.n	800090a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008f4:	2200      	movs	r2, #0
 80008f6:	6879      	ldr	r1, [r7, #4]
 80008f8:	f04f 30ff 	mov.w	r0, #4294967295
 80008fc:	f000 f90b 	bl	8000b16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000900:	4a06      	ldr	r2, [pc, #24]	; (800091c <HAL_InitTick+0x5c>)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000906:	2300      	movs	r3, #0
 8000908:	e000      	b.n	800090c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800090a:	2301      	movs	r3, #1
}
 800090c:	4618      	mov	r0, r3
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	20000034 	.word	0x20000034
 8000918:	2000003c 	.word	0x2000003c
 800091c:	20000038 	.word	0x20000038

08000920 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000924:	4b05      	ldr	r3, [pc, #20]	; (800093c <HAL_IncTick+0x1c>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	461a      	mov	r2, r3
 800092a:	4b05      	ldr	r3, [pc, #20]	; (8000940 <HAL_IncTick+0x20>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4413      	add	r3, r2
 8000930:	4a03      	ldr	r2, [pc, #12]	; (8000940 <HAL_IncTick+0x20>)
 8000932:	6013      	str	r3, [r2, #0]
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	bc80      	pop	{r7}
 800093a:	4770      	bx	lr
 800093c:	2000003c 	.word	0x2000003c
 8000940:	20000198 	.word	0x20000198

08000944 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  return uwTick;
 8000948:	4b02      	ldr	r3, [pc, #8]	; (8000954 <HAL_GetTick+0x10>)
 800094a:	681b      	ldr	r3, [r3, #0]
}
 800094c:	4618      	mov	r0, r3
 800094e:	46bd      	mov	sp, r7
 8000950:	bc80      	pop	{r7}
 8000952:	4770      	bx	lr
 8000954:	20000198 	.word	0x20000198

08000958 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000960:	f7ff fff0 	bl	8000944 <HAL_GetTick>
 8000964:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000970:	d005      	beq.n	800097e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000972:	4b0a      	ldr	r3, [pc, #40]	; (800099c <HAL_Delay+0x44>)
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	461a      	mov	r2, r3
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	4413      	add	r3, r2
 800097c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800097e:	bf00      	nop
 8000980:	f7ff ffe0 	bl	8000944 <HAL_GetTick>
 8000984:	4602      	mov	r2, r0
 8000986:	68bb      	ldr	r3, [r7, #8]
 8000988:	1ad3      	subs	r3, r2, r3
 800098a:	68fa      	ldr	r2, [r7, #12]
 800098c:	429a      	cmp	r2, r3
 800098e:	d8f7      	bhi.n	8000980 <HAL_Delay+0x28>
  {
  }
}
 8000990:	bf00      	nop
 8000992:	bf00      	nop
 8000994:	3710      	adds	r7, #16
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	2000003c 	.word	0x2000003c

080009a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b085      	sub	sp, #20
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	f003 0307 	and.w	r3, r3, #7
 80009ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009b0:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <__NVIC_SetPriorityGrouping+0x44>)
 80009b2:	68db      	ldr	r3, [r3, #12]
 80009b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009b6:	68ba      	ldr	r2, [r7, #8]
 80009b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009bc:	4013      	ands	r3, r2
 80009be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009d2:	4a04      	ldr	r2, [pc, #16]	; (80009e4 <__NVIC_SetPriorityGrouping+0x44>)
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	60d3      	str	r3, [r2, #12]
}
 80009d8:	bf00      	nop
 80009da:	3714      	adds	r7, #20
 80009dc:	46bd      	mov	sp, r7
 80009de:	bc80      	pop	{r7}
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	e000ed00 	.word	0xe000ed00

080009e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009ec:	4b04      	ldr	r3, [pc, #16]	; (8000a00 <__NVIC_GetPriorityGrouping+0x18>)
 80009ee:	68db      	ldr	r3, [r3, #12]
 80009f0:	0a1b      	lsrs	r3, r3, #8
 80009f2:	f003 0307 	and.w	r3, r3, #7
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bc80      	pop	{r7}
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	e000ed00 	.word	0xe000ed00

08000a04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	6039      	str	r1, [r7, #0]
 8000a0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	db0a      	blt.n	8000a2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	b2da      	uxtb	r2, r3
 8000a1c:	490c      	ldr	r1, [pc, #48]	; (8000a50 <__NVIC_SetPriority+0x4c>)
 8000a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a22:	0112      	lsls	r2, r2, #4
 8000a24:	b2d2      	uxtb	r2, r2
 8000a26:	440b      	add	r3, r1
 8000a28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a2c:	e00a      	b.n	8000a44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	b2da      	uxtb	r2, r3
 8000a32:	4908      	ldr	r1, [pc, #32]	; (8000a54 <__NVIC_SetPriority+0x50>)
 8000a34:	79fb      	ldrb	r3, [r7, #7]
 8000a36:	f003 030f 	and.w	r3, r3, #15
 8000a3a:	3b04      	subs	r3, #4
 8000a3c:	0112      	lsls	r2, r2, #4
 8000a3e:	b2d2      	uxtb	r2, r2
 8000a40:	440b      	add	r3, r1
 8000a42:	761a      	strb	r2, [r3, #24]
}
 8000a44:	bf00      	nop
 8000a46:	370c      	adds	r7, #12
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bc80      	pop	{r7}
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	e000e100 	.word	0xe000e100
 8000a54:	e000ed00 	.word	0xe000ed00

08000a58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b089      	sub	sp, #36	; 0x24
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	60f8      	str	r0, [r7, #12]
 8000a60:	60b9      	str	r1, [r7, #8]
 8000a62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	f003 0307 	and.w	r3, r3, #7
 8000a6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a6c:	69fb      	ldr	r3, [r7, #28]
 8000a6e:	f1c3 0307 	rsb	r3, r3, #7
 8000a72:	2b04      	cmp	r3, #4
 8000a74:	bf28      	it	cs
 8000a76:	2304      	movcs	r3, #4
 8000a78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a7a:	69fb      	ldr	r3, [r7, #28]
 8000a7c:	3304      	adds	r3, #4
 8000a7e:	2b06      	cmp	r3, #6
 8000a80:	d902      	bls.n	8000a88 <NVIC_EncodePriority+0x30>
 8000a82:	69fb      	ldr	r3, [r7, #28]
 8000a84:	3b03      	subs	r3, #3
 8000a86:	e000      	b.n	8000a8a <NVIC_EncodePriority+0x32>
 8000a88:	2300      	movs	r3, #0
 8000a8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a90:	69bb      	ldr	r3, [r7, #24]
 8000a92:	fa02 f303 	lsl.w	r3, r2, r3
 8000a96:	43da      	mvns	r2, r3
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	401a      	ands	r2, r3
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000aa0:	f04f 31ff 	mov.w	r1, #4294967295
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8000aaa:	43d9      	mvns	r1, r3
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab0:	4313      	orrs	r3, r2
         );
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3724      	adds	r7, #36	; 0x24
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bc80      	pop	{r7}
 8000aba:	4770      	bx	lr

08000abc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	3b01      	subs	r3, #1
 8000ac8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000acc:	d301      	bcc.n	8000ad2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ace:	2301      	movs	r3, #1
 8000ad0:	e00f      	b.n	8000af2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ad2:	4a0a      	ldr	r2, [pc, #40]	; (8000afc <SysTick_Config+0x40>)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	3b01      	subs	r3, #1
 8000ad8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ada:	210f      	movs	r1, #15
 8000adc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae0:	f7ff ff90 	bl	8000a04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ae4:	4b05      	ldr	r3, [pc, #20]	; (8000afc <SysTick_Config+0x40>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aea:	4b04      	ldr	r3, [pc, #16]	; (8000afc <SysTick_Config+0x40>)
 8000aec:	2207      	movs	r2, #7
 8000aee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000af0:	2300      	movs	r3, #0
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	e000e010 	.word	0xe000e010

08000b00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b08:	6878      	ldr	r0, [r7, #4]
 8000b0a:	f7ff ff49 	bl	80009a0 <__NVIC_SetPriorityGrouping>
}
 8000b0e:	bf00      	nop
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b16:	b580      	push	{r7, lr}
 8000b18:	b086      	sub	sp, #24
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	60b9      	str	r1, [r7, #8]
 8000b20:	607a      	str	r2, [r7, #4]
 8000b22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b24:	2300      	movs	r3, #0
 8000b26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b28:	f7ff ff5e 	bl	80009e8 <__NVIC_GetPriorityGrouping>
 8000b2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b2e:	687a      	ldr	r2, [r7, #4]
 8000b30:	68b9      	ldr	r1, [r7, #8]
 8000b32:	6978      	ldr	r0, [r7, #20]
 8000b34:	f7ff ff90 	bl	8000a58 <NVIC_EncodePriority>
 8000b38:	4602      	mov	r2, r0
 8000b3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b3e:	4611      	mov	r1, r2
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff ff5f 	bl	8000a04 <__NVIC_SetPriority>
}
 8000b46:	bf00      	nop
 8000b48:	3718      	adds	r7, #24
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b082      	sub	sp, #8
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	f7ff ffb0 	bl	8000abc <SysTick_Config>
 8000b5c:	4603      	mov	r3, r0
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
	...

08000b68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b08b      	sub	sp, #44	; 0x2c
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b72:	2300      	movs	r3, #0
 8000b74:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b76:	2300      	movs	r3, #0
 8000b78:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b7a:	e169      	b.n	8000e50 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b80:	fa02 f303 	lsl.w	r3, r2, r3
 8000b84:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	69fa      	ldr	r2, [r7, #28]
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b90:	69ba      	ldr	r2, [r7, #24]
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	f040 8158 	bne.w	8000e4a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	4a9a      	ldr	r2, [pc, #616]	; (8000e08 <HAL_GPIO_Init+0x2a0>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d05e      	beq.n	8000c62 <HAL_GPIO_Init+0xfa>
 8000ba4:	4a98      	ldr	r2, [pc, #608]	; (8000e08 <HAL_GPIO_Init+0x2a0>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d875      	bhi.n	8000c96 <HAL_GPIO_Init+0x12e>
 8000baa:	4a98      	ldr	r2, [pc, #608]	; (8000e0c <HAL_GPIO_Init+0x2a4>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d058      	beq.n	8000c62 <HAL_GPIO_Init+0xfa>
 8000bb0:	4a96      	ldr	r2, [pc, #600]	; (8000e0c <HAL_GPIO_Init+0x2a4>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d86f      	bhi.n	8000c96 <HAL_GPIO_Init+0x12e>
 8000bb6:	4a96      	ldr	r2, [pc, #600]	; (8000e10 <HAL_GPIO_Init+0x2a8>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d052      	beq.n	8000c62 <HAL_GPIO_Init+0xfa>
 8000bbc:	4a94      	ldr	r2, [pc, #592]	; (8000e10 <HAL_GPIO_Init+0x2a8>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d869      	bhi.n	8000c96 <HAL_GPIO_Init+0x12e>
 8000bc2:	4a94      	ldr	r2, [pc, #592]	; (8000e14 <HAL_GPIO_Init+0x2ac>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d04c      	beq.n	8000c62 <HAL_GPIO_Init+0xfa>
 8000bc8:	4a92      	ldr	r2, [pc, #584]	; (8000e14 <HAL_GPIO_Init+0x2ac>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d863      	bhi.n	8000c96 <HAL_GPIO_Init+0x12e>
 8000bce:	4a92      	ldr	r2, [pc, #584]	; (8000e18 <HAL_GPIO_Init+0x2b0>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d046      	beq.n	8000c62 <HAL_GPIO_Init+0xfa>
 8000bd4:	4a90      	ldr	r2, [pc, #576]	; (8000e18 <HAL_GPIO_Init+0x2b0>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d85d      	bhi.n	8000c96 <HAL_GPIO_Init+0x12e>
 8000bda:	2b12      	cmp	r3, #18
 8000bdc:	d82a      	bhi.n	8000c34 <HAL_GPIO_Init+0xcc>
 8000bde:	2b12      	cmp	r3, #18
 8000be0:	d859      	bhi.n	8000c96 <HAL_GPIO_Init+0x12e>
 8000be2:	a201      	add	r2, pc, #4	; (adr r2, 8000be8 <HAL_GPIO_Init+0x80>)
 8000be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000be8:	08000c63 	.word	0x08000c63
 8000bec:	08000c3d 	.word	0x08000c3d
 8000bf0:	08000c4f 	.word	0x08000c4f
 8000bf4:	08000c91 	.word	0x08000c91
 8000bf8:	08000c97 	.word	0x08000c97
 8000bfc:	08000c97 	.word	0x08000c97
 8000c00:	08000c97 	.word	0x08000c97
 8000c04:	08000c97 	.word	0x08000c97
 8000c08:	08000c97 	.word	0x08000c97
 8000c0c:	08000c97 	.word	0x08000c97
 8000c10:	08000c97 	.word	0x08000c97
 8000c14:	08000c97 	.word	0x08000c97
 8000c18:	08000c97 	.word	0x08000c97
 8000c1c:	08000c97 	.word	0x08000c97
 8000c20:	08000c97 	.word	0x08000c97
 8000c24:	08000c97 	.word	0x08000c97
 8000c28:	08000c97 	.word	0x08000c97
 8000c2c:	08000c45 	.word	0x08000c45
 8000c30:	08000c59 	.word	0x08000c59
 8000c34:	4a79      	ldr	r2, [pc, #484]	; (8000e1c <HAL_GPIO_Init+0x2b4>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d013      	beq.n	8000c62 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c3a:	e02c      	b.n	8000c96 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	623b      	str	r3, [r7, #32]
          break;
 8000c42:	e029      	b.n	8000c98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	3304      	adds	r3, #4
 8000c4a:	623b      	str	r3, [r7, #32]
          break;
 8000c4c:	e024      	b.n	8000c98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	68db      	ldr	r3, [r3, #12]
 8000c52:	3308      	adds	r3, #8
 8000c54:	623b      	str	r3, [r7, #32]
          break;
 8000c56:	e01f      	b.n	8000c98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	330c      	adds	r3, #12
 8000c5e:	623b      	str	r3, [r7, #32]
          break;
 8000c60:	e01a      	b.n	8000c98 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	689b      	ldr	r3, [r3, #8]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d102      	bne.n	8000c70 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c6a:	2304      	movs	r3, #4
 8000c6c:	623b      	str	r3, [r7, #32]
          break;
 8000c6e:	e013      	b.n	8000c98 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	689b      	ldr	r3, [r3, #8]
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d105      	bne.n	8000c84 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c78:	2308      	movs	r3, #8
 8000c7a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	69fa      	ldr	r2, [r7, #28]
 8000c80:	611a      	str	r2, [r3, #16]
          break;
 8000c82:	e009      	b.n	8000c98 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c84:	2308      	movs	r3, #8
 8000c86:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	69fa      	ldr	r2, [r7, #28]
 8000c8c:	615a      	str	r2, [r3, #20]
          break;
 8000c8e:	e003      	b.n	8000c98 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c90:	2300      	movs	r3, #0
 8000c92:	623b      	str	r3, [r7, #32]
          break;
 8000c94:	e000      	b.n	8000c98 <HAL_GPIO_Init+0x130>
          break;
 8000c96:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c98:	69bb      	ldr	r3, [r7, #24]
 8000c9a:	2bff      	cmp	r3, #255	; 0xff
 8000c9c:	d801      	bhi.n	8000ca2 <HAL_GPIO_Init+0x13a>
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	e001      	b.n	8000ca6 <HAL_GPIO_Init+0x13e>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	3304      	adds	r3, #4
 8000ca6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ca8:	69bb      	ldr	r3, [r7, #24]
 8000caa:	2bff      	cmp	r3, #255	; 0xff
 8000cac:	d802      	bhi.n	8000cb4 <HAL_GPIO_Init+0x14c>
 8000cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	e002      	b.n	8000cba <HAL_GPIO_Init+0x152>
 8000cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb6:	3b08      	subs	r3, #8
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	210f      	movs	r1, #15
 8000cc2:	693b      	ldr	r3, [r7, #16]
 8000cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc8:	43db      	mvns	r3, r3
 8000cca:	401a      	ands	r2, r3
 8000ccc:	6a39      	ldr	r1, [r7, #32]
 8000cce:	693b      	ldr	r3, [r7, #16]
 8000cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd4:	431a      	orrs	r2, r3
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f000 80b1 	beq.w	8000e4a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ce8:	4b4d      	ldr	r3, [pc, #308]	; (8000e20 <HAL_GPIO_Init+0x2b8>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	4a4c      	ldr	r2, [pc, #304]	; (8000e20 <HAL_GPIO_Init+0x2b8>)
 8000cee:	f043 0301 	orr.w	r3, r3, #1
 8000cf2:	6193      	str	r3, [r2, #24]
 8000cf4:	4b4a      	ldr	r3, [pc, #296]	; (8000e20 <HAL_GPIO_Init+0x2b8>)
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	f003 0301 	and.w	r3, r3, #1
 8000cfc:	60bb      	str	r3, [r7, #8]
 8000cfe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d00:	4a48      	ldr	r2, [pc, #288]	; (8000e24 <HAL_GPIO_Init+0x2bc>)
 8000d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d04:	089b      	lsrs	r3, r3, #2
 8000d06:	3302      	adds	r3, #2
 8000d08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d0c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d10:	f003 0303 	and.w	r3, r3, #3
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	220f      	movs	r2, #15
 8000d18:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1c:	43db      	mvns	r3, r3
 8000d1e:	68fa      	ldr	r2, [r7, #12]
 8000d20:	4013      	ands	r3, r2
 8000d22:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	4a40      	ldr	r2, [pc, #256]	; (8000e28 <HAL_GPIO_Init+0x2c0>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d013      	beq.n	8000d54 <HAL_GPIO_Init+0x1ec>
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	4a3f      	ldr	r2, [pc, #252]	; (8000e2c <HAL_GPIO_Init+0x2c4>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d00d      	beq.n	8000d50 <HAL_GPIO_Init+0x1e8>
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	4a3e      	ldr	r2, [pc, #248]	; (8000e30 <HAL_GPIO_Init+0x2c8>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d007      	beq.n	8000d4c <HAL_GPIO_Init+0x1e4>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	4a3d      	ldr	r2, [pc, #244]	; (8000e34 <HAL_GPIO_Init+0x2cc>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d101      	bne.n	8000d48 <HAL_GPIO_Init+0x1e0>
 8000d44:	2303      	movs	r3, #3
 8000d46:	e006      	b.n	8000d56 <HAL_GPIO_Init+0x1ee>
 8000d48:	2304      	movs	r3, #4
 8000d4a:	e004      	b.n	8000d56 <HAL_GPIO_Init+0x1ee>
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	e002      	b.n	8000d56 <HAL_GPIO_Init+0x1ee>
 8000d50:	2301      	movs	r3, #1
 8000d52:	e000      	b.n	8000d56 <HAL_GPIO_Init+0x1ee>
 8000d54:	2300      	movs	r3, #0
 8000d56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d58:	f002 0203 	and.w	r2, r2, #3
 8000d5c:	0092      	lsls	r2, r2, #2
 8000d5e:	4093      	lsls	r3, r2
 8000d60:	68fa      	ldr	r2, [r7, #12]
 8000d62:	4313      	orrs	r3, r2
 8000d64:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d66:	492f      	ldr	r1, [pc, #188]	; (8000e24 <HAL_GPIO_Init+0x2bc>)
 8000d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d6a:	089b      	lsrs	r3, r3, #2
 8000d6c:	3302      	adds	r3, #2
 8000d6e:	68fa      	ldr	r2, [r7, #12]
 8000d70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d006      	beq.n	8000d8e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d80:	4b2d      	ldr	r3, [pc, #180]	; (8000e38 <HAL_GPIO_Init+0x2d0>)
 8000d82:	689a      	ldr	r2, [r3, #8]
 8000d84:	492c      	ldr	r1, [pc, #176]	; (8000e38 <HAL_GPIO_Init+0x2d0>)
 8000d86:	69bb      	ldr	r3, [r7, #24]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	608b      	str	r3, [r1, #8]
 8000d8c:	e006      	b.n	8000d9c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d8e:	4b2a      	ldr	r3, [pc, #168]	; (8000e38 <HAL_GPIO_Init+0x2d0>)
 8000d90:	689a      	ldr	r2, [r3, #8]
 8000d92:	69bb      	ldr	r3, [r7, #24]
 8000d94:	43db      	mvns	r3, r3
 8000d96:	4928      	ldr	r1, [pc, #160]	; (8000e38 <HAL_GPIO_Init+0x2d0>)
 8000d98:	4013      	ands	r3, r2
 8000d9a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d006      	beq.n	8000db6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000da8:	4b23      	ldr	r3, [pc, #140]	; (8000e38 <HAL_GPIO_Init+0x2d0>)
 8000daa:	68da      	ldr	r2, [r3, #12]
 8000dac:	4922      	ldr	r1, [pc, #136]	; (8000e38 <HAL_GPIO_Init+0x2d0>)
 8000dae:	69bb      	ldr	r3, [r7, #24]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	60cb      	str	r3, [r1, #12]
 8000db4:	e006      	b.n	8000dc4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000db6:	4b20      	ldr	r3, [pc, #128]	; (8000e38 <HAL_GPIO_Init+0x2d0>)
 8000db8:	68da      	ldr	r2, [r3, #12]
 8000dba:	69bb      	ldr	r3, [r7, #24]
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	491e      	ldr	r1, [pc, #120]	; (8000e38 <HAL_GPIO_Init+0x2d0>)
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d006      	beq.n	8000dde <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000dd0:	4b19      	ldr	r3, [pc, #100]	; (8000e38 <HAL_GPIO_Init+0x2d0>)
 8000dd2:	685a      	ldr	r2, [r3, #4]
 8000dd4:	4918      	ldr	r1, [pc, #96]	; (8000e38 <HAL_GPIO_Init+0x2d0>)
 8000dd6:	69bb      	ldr	r3, [r7, #24]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	604b      	str	r3, [r1, #4]
 8000ddc:	e006      	b.n	8000dec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000dde:	4b16      	ldr	r3, [pc, #88]	; (8000e38 <HAL_GPIO_Init+0x2d0>)
 8000de0:	685a      	ldr	r2, [r3, #4]
 8000de2:	69bb      	ldr	r3, [r7, #24]
 8000de4:	43db      	mvns	r3, r3
 8000de6:	4914      	ldr	r1, [pc, #80]	; (8000e38 <HAL_GPIO_Init+0x2d0>)
 8000de8:	4013      	ands	r3, r2
 8000dea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d021      	beq.n	8000e3c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000df8:	4b0f      	ldr	r3, [pc, #60]	; (8000e38 <HAL_GPIO_Init+0x2d0>)
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	490e      	ldr	r1, [pc, #56]	; (8000e38 <HAL_GPIO_Init+0x2d0>)
 8000dfe:	69bb      	ldr	r3, [r7, #24]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	600b      	str	r3, [r1, #0]
 8000e04:	e021      	b.n	8000e4a <HAL_GPIO_Init+0x2e2>
 8000e06:	bf00      	nop
 8000e08:	10320000 	.word	0x10320000
 8000e0c:	10310000 	.word	0x10310000
 8000e10:	10220000 	.word	0x10220000
 8000e14:	10210000 	.word	0x10210000
 8000e18:	10120000 	.word	0x10120000
 8000e1c:	10110000 	.word	0x10110000
 8000e20:	40021000 	.word	0x40021000
 8000e24:	40010000 	.word	0x40010000
 8000e28:	40010800 	.word	0x40010800
 8000e2c:	40010c00 	.word	0x40010c00
 8000e30:	40011000 	.word	0x40011000
 8000e34:	40011400 	.word	0x40011400
 8000e38:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e3c:	4b0b      	ldr	r3, [pc, #44]	; (8000e6c <HAL_GPIO_Init+0x304>)
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	43db      	mvns	r3, r3
 8000e44:	4909      	ldr	r1, [pc, #36]	; (8000e6c <HAL_GPIO_Init+0x304>)
 8000e46:	4013      	ands	r3, r2
 8000e48:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e56:	fa22 f303 	lsr.w	r3, r2, r3
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	f47f ae8e 	bne.w	8000b7c <HAL_GPIO_Init+0x14>
  }
}
 8000e60:	bf00      	nop
 8000e62:	bf00      	nop
 8000e64:	372c      	adds	r7, #44	; 0x2c
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bc80      	pop	{r7}
 8000e6a:	4770      	bx	lr
 8000e6c:	40010400 	.word	0x40010400

08000e70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d101      	bne.n	8000e82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e12b      	b.n	80010da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d106      	bne.n	8000e9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2200      	movs	r2, #0
 8000e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	f7ff faf4 	bl	8000484 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2224      	movs	r2, #36	; 0x24
 8000ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f022 0201 	bic.w	r2, r2, #1
 8000eb2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000ec2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000ed2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000ed4:	f001 fbca 	bl	800266c <HAL_RCC_GetPCLK1Freq>
 8000ed8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	4a81      	ldr	r2, [pc, #516]	; (80010e4 <HAL_I2C_Init+0x274>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d807      	bhi.n	8000ef4 <HAL_I2C_Init+0x84>
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	4a80      	ldr	r2, [pc, #512]	; (80010e8 <HAL_I2C_Init+0x278>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	bf94      	ite	ls
 8000eec:	2301      	movls	r3, #1
 8000eee:	2300      	movhi	r3, #0
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	e006      	b.n	8000f02 <HAL_I2C_Init+0x92>
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	4a7d      	ldr	r2, [pc, #500]	; (80010ec <HAL_I2C_Init+0x27c>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	bf94      	ite	ls
 8000efc:	2301      	movls	r3, #1
 8000efe:	2300      	movhi	r3, #0
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e0e7      	b.n	80010da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	4a78      	ldr	r2, [pc, #480]	; (80010f0 <HAL_I2C_Init+0x280>)
 8000f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f12:	0c9b      	lsrs	r3, r3, #18
 8000f14:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	68ba      	ldr	r2, [r7, #8]
 8000f26:	430a      	orrs	r2, r1
 8000f28:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	6a1b      	ldr	r3, [r3, #32]
 8000f30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	4a6a      	ldr	r2, [pc, #424]	; (80010e4 <HAL_I2C_Init+0x274>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d802      	bhi.n	8000f44 <HAL_I2C_Init+0xd4>
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	3301      	adds	r3, #1
 8000f42:	e009      	b.n	8000f58 <HAL_I2C_Init+0xe8>
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000f4a:	fb02 f303 	mul.w	r3, r2, r3
 8000f4e:	4a69      	ldr	r2, [pc, #420]	; (80010f4 <HAL_I2C_Init+0x284>)
 8000f50:	fba2 2303 	umull	r2, r3, r2, r3
 8000f54:	099b      	lsrs	r3, r3, #6
 8000f56:	3301      	adds	r3, #1
 8000f58:	687a      	ldr	r2, [r7, #4]
 8000f5a:	6812      	ldr	r2, [r2, #0]
 8000f5c:	430b      	orrs	r3, r1
 8000f5e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	69db      	ldr	r3, [r3, #28]
 8000f66:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000f6a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	495c      	ldr	r1, [pc, #368]	; (80010e4 <HAL_I2C_Init+0x274>)
 8000f74:	428b      	cmp	r3, r1
 8000f76:	d819      	bhi.n	8000fac <HAL_I2C_Init+0x13c>
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	1e59      	subs	r1, r3, #1
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f86:	1c59      	adds	r1, r3, #1
 8000f88:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000f8c:	400b      	ands	r3, r1
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d00a      	beq.n	8000fa8 <HAL_I2C_Init+0x138>
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	1e59      	subs	r1, r3, #1
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fa6:	e051      	b.n	800104c <HAL_I2C_Init+0x1dc>
 8000fa8:	2304      	movs	r3, #4
 8000faa:	e04f      	b.n	800104c <HAL_I2C_Init+0x1dc>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d111      	bne.n	8000fd8 <HAL_I2C_Init+0x168>
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	1e58      	subs	r0, r3, #1
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6859      	ldr	r1, [r3, #4]
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	440b      	add	r3, r1
 8000fc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	bf0c      	ite	eq
 8000fd0:	2301      	moveq	r3, #1
 8000fd2:	2300      	movne	r3, #0
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	e012      	b.n	8000ffe <HAL_I2C_Init+0x18e>
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	1e58      	subs	r0, r3, #1
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6859      	ldr	r1, [r3, #4]
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	440b      	add	r3, r1
 8000fe6:	0099      	lsls	r1, r3, #2
 8000fe8:	440b      	add	r3, r1
 8000fea:	fbb0 f3f3 	udiv	r3, r0, r3
 8000fee:	3301      	adds	r3, #1
 8000ff0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	bf0c      	ite	eq
 8000ff8:	2301      	moveq	r3, #1
 8000ffa:	2300      	movne	r3, #0
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <HAL_I2C_Init+0x196>
 8001002:	2301      	movs	r3, #1
 8001004:	e022      	b.n	800104c <HAL_I2C_Init+0x1dc>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d10e      	bne.n	800102c <HAL_I2C_Init+0x1bc>
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	1e58      	subs	r0, r3, #1
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6859      	ldr	r1, [r3, #4]
 8001016:	460b      	mov	r3, r1
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	440b      	add	r3, r1
 800101c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001020:	3301      	adds	r3, #1
 8001022:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001026:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800102a:	e00f      	b.n	800104c <HAL_I2C_Init+0x1dc>
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	1e58      	subs	r0, r3, #1
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6859      	ldr	r1, [r3, #4]
 8001034:	460b      	mov	r3, r1
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	440b      	add	r3, r1
 800103a:	0099      	lsls	r1, r3, #2
 800103c:	440b      	add	r3, r1
 800103e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001042:	3301      	adds	r3, #1
 8001044:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001048:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800104c:	6879      	ldr	r1, [r7, #4]
 800104e:	6809      	ldr	r1, [r1, #0]
 8001050:	4313      	orrs	r3, r2
 8001052:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	69da      	ldr	r2, [r3, #28]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6a1b      	ldr	r3, [r3, #32]
 8001066:	431a      	orrs	r2, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	430a      	orrs	r2, r1
 800106e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800107a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	6911      	ldr	r1, [r2, #16]
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	68d2      	ldr	r2, [r2, #12]
 8001086:	4311      	orrs	r1, r2
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	6812      	ldr	r2, [r2, #0]
 800108c:	430b      	orrs	r3, r1
 800108e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	68db      	ldr	r3, [r3, #12]
 8001096:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	695a      	ldr	r2, [r3, #20]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	699b      	ldr	r3, [r3, #24]
 80010a2:	431a      	orrs	r2, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	430a      	orrs	r2, r1
 80010aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f042 0201 	orr.w	r2, r2, #1
 80010ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2200      	movs	r2, #0
 80010c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2220      	movs	r2, #32
 80010c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2200      	movs	r2, #0
 80010ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2200      	movs	r2, #0
 80010d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	000186a0 	.word	0x000186a0
 80010e8:	001e847f 	.word	0x001e847f
 80010ec:	003d08ff 	.word	0x003d08ff
 80010f0:	431bde83 	.word	0x431bde83
 80010f4:	10624dd3 	.word	0x10624dd3

080010f8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b088      	sub	sp, #32
 80010fc:	af02      	add	r7, sp, #8
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	607a      	str	r2, [r7, #4]
 8001102:	461a      	mov	r2, r3
 8001104:	460b      	mov	r3, r1
 8001106:	817b      	strh	r3, [r7, #10]
 8001108:	4613      	mov	r3, r2
 800110a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800110c:	f7ff fc1a 	bl	8000944 <HAL_GetTick>
 8001110:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001118:	b2db      	uxtb	r3, r3
 800111a:	2b20      	cmp	r3, #32
 800111c:	f040 80e0 	bne.w	80012e0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	9300      	str	r3, [sp, #0]
 8001124:	2319      	movs	r3, #25
 8001126:	2201      	movs	r2, #1
 8001128:	4970      	ldr	r1, [pc, #448]	; (80012ec <HAL_I2C_Master_Transmit+0x1f4>)
 800112a:	68f8      	ldr	r0, [r7, #12]
 800112c:	f000 fc9e 	bl	8001a6c <I2C_WaitOnFlagUntilTimeout>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001136:	2302      	movs	r3, #2
 8001138:	e0d3      	b.n	80012e2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001140:	2b01      	cmp	r3, #1
 8001142:	d101      	bne.n	8001148 <HAL_I2C_Master_Transmit+0x50>
 8001144:	2302      	movs	r3, #2
 8001146:	e0cc      	b.n	80012e2 <HAL_I2C_Master_Transmit+0x1ea>
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	2201      	movs	r2, #1
 800114c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	2b01      	cmp	r3, #1
 800115c:	d007      	beq.n	800116e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f042 0201 	orr.w	r2, r2, #1
 800116c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800117c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	2221      	movs	r2, #33	; 0x21
 8001182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	2210      	movs	r2, #16
 800118a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	2200      	movs	r2, #0
 8001192:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	893a      	ldrh	r2, [r7, #8]
 800119e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011a4:	b29a      	uxth	r2, r3
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	4a50      	ldr	r2, [pc, #320]	; (80012f0 <HAL_I2C_Master_Transmit+0x1f8>)
 80011ae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80011b0:	8979      	ldrh	r1, [r7, #10]
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	6a3a      	ldr	r2, [r7, #32]
 80011b6:	68f8      	ldr	r0, [r7, #12]
 80011b8:	f000 fb08 	bl	80017cc <I2C_MasterRequestWrite>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e08d      	b.n	80012e2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80011c6:	2300      	movs	r3, #0
 80011c8:	613b      	str	r3, [r7, #16]
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	695b      	ldr	r3, [r3, #20]
 80011d0:	613b      	str	r3, [r7, #16]
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	613b      	str	r3, [r7, #16]
 80011da:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80011dc:	e066      	b.n	80012ac <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80011de:	697a      	ldr	r2, [r7, #20]
 80011e0:	6a39      	ldr	r1, [r7, #32]
 80011e2:	68f8      	ldr	r0, [r7, #12]
 80011e4:	f000 fd5c 	bl	8001ca0 <I2C_WaitOnTXEFlagUntilTimeout>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d00d      	beq.n	800120a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f2:	2b04      	cmp	r3, #4
 80011f4:	d107      	bne.n	8001206 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001204:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e06b      	b.n	80012e2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120e:	781a      	ldrb	r2, [r3, #0]
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121a:	1c5a      	adds	r2, r3, #1
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001224:	b29b      	uxth	r3, r3
 8001226:	3b01      	subs	r3, #1
 8001228:	b29a      	uxth	r2, r3
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001232:	3b01      	subs	r3, #1
 8001234:	b29a      	uxth	r2, r3
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	695b      	ldr	r3, [r3, #20]
 8001240:	f003 0304 	and.w	r3, r3, #4
 8001244:	2b04      	cmp	r3, #4
 8001246:	d11b      	bne.n	8001280 <HAL_I2C_Master_Transmit+0x188>
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800124c:	2b00      	cmp	r3, #0
 800124e:	d017      	beq.n	8001280 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001254:	781a      	ldrb	r2, [r3, #0]
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001260:	1c5a      	adds	r2, r3, #1
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800126a:	b29b      	uxth	r3, r3
 800126c:	3b01      	subs	r3, #1
 800126e:	b29a      	uxth	r2, r3
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001278:	3b01      	subs	r3, #1
 800127a:	b29a      	uxth	r2, r3
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001280:	697a      	ldr	r2, [r7, #20]
 8001282:	6a39      	ldr	r1, [r7, #32]
 8001284:	68f8      	ldr	r0, [r7, #12]
 8001286:	f000 fd53 	bl	8001d30 <I2C_WaitOnBTFFlagUntilTimeout>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d00d      	beq.n	80012ac <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001294:	2b04      	cmp	r3, #4
 8001296:	d107      	bne.n	80012a8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80012a6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e01a      	b.n	80012e2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d194      	bne.n	80011de <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80012c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	2220      	movs	r2, #32
 80012c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	2200      	movs	r2, #0
 80012d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	2200      	movs	r2, #0
 80012d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80012dc:	2300      	movs	r3, #0
 80012de:	e000      	b.n	80012e2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80012e0:	2302      	movs	r3, #2
  }
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3718      	adds	r7, #24
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	00100002 	.word	0x00100002
 80012f0:	ffff0000 	.word	0xffff0000

080012f4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b08c      	sub	sp, #48	; 0x30
 80012f8:	af02      	add	r7, sp, #8
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	607a      	str	r2, [r7, #4]
 80012fe:	461a      	mov	r2, r3
 8001300:	460b      	mov	r3, r1
 8001302:	817b      	strh	r3, [r7, #10]
 8001304:	4613      	mov	r3, r2
 8001306:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001308:	2300      	movs	r3, #0
 800130a:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800130c:	f7ff fb1a 	bl	8000944 <HAL_GetTick>
 8001310:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001318:	b2db      	uxtb	r3, r3
 800131a:	2b20      	cmp	r3, #32
 800131c:	f040 824b 	bne.w	80017b6 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001322:	9300      	str	r3, [sp, #0]
 8001324:	2319      	movs	r3, #25
 8001326:	2201      	movs	r2, #1
 8001328:	497f      	ldr	r1, [pc, #508]	; (8001528 <HAL_I2C_Master_Receive+0x234>)
 800132a:	68f8      	ldr	r0, [r7, #12]
 800132c:	f000 fb9e 	bl	8001a6c <I2C_WaitOnFlagUntilTimeout>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8001336:	2302      	movs	r3, #2
 8001338:	e23e      	b.n	80017b8 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001340:	2b01      	cmp	r3, #1
 8001342:	d101      	bne.n	8001348 <HAL_I2C_Master_Receive+0x54>
 8001344:	2302      	movs	r3, #2
 8001346:	e237      	b.n	80017b8 <HAL_I2C_Master_Receive+0x4c4>
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	2201      	movs	r2, #1
 800134c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	2b01      	cmp	r3, #1
 800135c:	d007      	beq.n	800136e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f042 0201 	orr.w	r2, r2, #1
 800136c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800137c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	2222      	movs	r2, #34	; 0x22
 8001382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	2210      	movs	r2, #16
 800138a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	2200      	movs	r2, #0
 8001392:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	893a      	ldrh	r2, [r7, #8]
 800139e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013a4:	b29a      	uxth	r2, r3
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	4a5f      	ldr	r2, [pc, #380]	; (800152c <HAL_I2C_Master_Receive+0x238>)
 80013ae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80013b0:	8979      	ldrh	r1, [r7, #10]
 80013b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80013b6:	68f8      	ldr	r0, [r7, #12]
 80013b8:	f000 fa8a 	bl	80018d0 <I2C_MasterRequestRead>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e1f8      	b.n	80017b8 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d113      	bne.n	80013f6 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013ce:	2300      	movs	r3, #0
 80013d0:	61fb      	str	r3, [r7, #28]
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	695b      	ldr	r3, [r3, #20]
 80013d8:	61fb      	str	r3, [r7, #28]
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	699b      	ldr	r3, [r3, #24]
 80013e0:	61fb      	str	r3, [r7, #28]
 80013e2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	e1cc      	b.n	8001790 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d11e      	bne.n	800143c <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800140c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800140e:	b672      	cpsid	i
}
 8001410:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001412:	2300      	movs	r3, #0
 8001414:	61bb      	str	r3, [r7, #24]
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	695b      	ldr	r3, [r3, #20]
 800141c:	61bb      	str	r3, [r7, #24]
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	699b      	ldr	r3, [r3, #24]
 8001424:	61bb      	str	r3, [r7, #24]
 8001426:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001436:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001438:	b662      	cpsie	i
}
 800143a:	e035      	b.n	80014a8 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001440:	2b02      	cmp	r3, #2
 8001442:	d11e      	bne.n	8001482 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001452:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001454:	b672      	cpsid	i
}
 8001456:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001458:	2300      	movs	r3, #0
 800145a:	617b      	str	r3, [r7, #20]
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	695b      	ldr	r3, [r3, #20]
 8001462:	617b      	str	r3, [r7, #20]
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	699b      	ldr	r3, [r3, #24]
 800146a:	617b      	str	r3, [r7, #20]
 800146c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800147c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800147e:	b662      	cpsie	i
}
 8001480:	e012      	b.n	80014a8 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001490:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001492:	2300      	movs	r3, #0
 8001494:	613b      	str	r3, [r7, #16]
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	695b      	ldr	r3, [r3, #20]
 800149c:	613b      	str	r3, [r7, #16]
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	613b      	str	r3, [r7, #16]
 80014a6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80014a8:	e172      	b.n	8001790 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014ae:	2b03      	cmp	r3, #3
 80014b0:	f200 811f 	bhi.w	80016f2 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d123      	bne.n	8001504 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80014c0:	68f8      	ldr	r0, [r7, #12]
 80014c2:	f000 fc7d 	bl	8001dc0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e173      	b.n	80017b8 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	691a      	ldr	r2, [r3, #16]
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014da:	b2d2      	uxtb	r2, r2
 80014dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e2:	1c5a      	adds	r2, r3, #1
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014ec:	3b01      	subs	r3, #1
 80014ee:	b29a      	uxth	r2, r3
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	3b01      	subs	r3, #1
 80014fc:	b29a      	uxth	r2, r3
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001502:	e145      	b.n	8001790 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001508:	2b02      	cmp	r3, #2
 800150a:	d152      	bne.n	80015b2 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800150c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150e:	9300      	str	r3, [sp, #0]
 8001510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001512:	2200      	movs	r2, #0
 8001514:	4906      	ldr	r1, [pc, #24]	; (8001530 <HAL_I2C_Master_Receive+0x23c>)
 8001516:	68f8      	ldr	r0, [r7, #12]
 8001518:	f000 faa8 	bl	8001a6c <I2C_WaitOnFlagUntilTimeout>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d008      	beq.n	8001534 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e148      	b.n	80017b8 <HAL_I2C_Master_Receive+0x4c4>
 8001526:	bf00      	nop
 8001528:	00100002 	.word	0x00100002
 800152c:	ffff0000 	.word	0xffff0000
 8001530:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001534:	b672      	cpsid	i
}
 8001536:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001546:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	691a      	ldr	r2, [r3, #16]
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001552:	b2d2      	uxtb	r2, r2
 8001554:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800155a:	1c5a      	adds	r2, r3, #1
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001564:	3b01      	subs	r3, #1
 8001566:	b29a      	uxth	r2, r3
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001570:	b29b      	uxth	r3, r3
 8001572:	3b01      	subs	r3, #1
 8001574:	b29a      	uxth	r2, r3
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800157a:	b662      	cpsie	i
}
 800157c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	691a      	ldr	r2, [r3, #16]
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001588:	b2d2      	uxtb	r2, r2
 800158a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001590:	1c5a      	adds	r2, r3, #1
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800159a:	3b01      	subs	r3, #1
 800159c:	b29a      	uxth	r2, r3
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	3b01      	subs	r3, #1
 80015aa:	b29a      	uxth	r2, r3
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80015b0:	e0ee      	b.n	8001790 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80015b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b4:	9300      	str	r3, [sp, #0]
 80015b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015b8:	2200      	movs	r2, #0
 80015ba:	4981      	ldr	r1, [pc, #516]	; (80017c0 <HAL_I2C_Master_Receive+0x4cc>)
 80015bc:	68f8      	ldr	r0, [r7, #12]
 80015be:	f000 fa55 	bl	8001a6c <I2C_WaitOnFlagUntilTimeout>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e0f5      	b.n	80017b8 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015da:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80015dc:	b672      	cpsid	i
}
 80015de:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	691a      	ldr	r2, [r3, #16]
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ea:	b2d2      	uxtb	r2, r2
 80015ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f2:	1c5a      	adds	r2, r3, #1
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015fc:	3b01      	subs	r3, #1
 80015fe:	b29a      	uxth	r2, r3
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001608:	b29b      	uxth	r3, r3
 800160a:	3b01      	subs	r3, #1
 800160c:	b29a      	uxth	r2, r3
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001612:	4b6c      	ldr	r3, [pc, #432]	; (80017c4 <HAL_I2C_Master_Receive+0x4d0>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	08db      	lsrs	r3, r3, #3
 8001618:	4a6b      	ldr	r2, [pc, #428]	; (80017c8 <HAL_I2C_Master_Receive+0x4d4>)
 800161a:	fba2 2303 	umull	r2, r3, r2, r3
 800161e:	0a1a      	lsrs	r2, r3, #8
 8001620:	4613      	mov	r3, r2
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	4413      	add	r3, r2
 8001626:	00da      	lsls	r2, r3, #3
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800162c:	6a3b      	ldr	r3, [r7, #32]
 800162e:	3b01      	subs	r3, #1
 8001630:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001632:	6a3b      	ldr	r3, [r7, #32]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d118      	bne.n	800166a <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	2200      	movs	r2, #0
 800163c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	2220      	movs	r2, #32
 8001642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	2200      	movs	r2, #0
 800164a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001652:	f043 0220 	orr.w	r2, r3, #32
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800165a:	b662      	cpsie	i
}
 800165c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	2200      	movs	r2, #0
 8001662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e0a6      	b.n	80017b8 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	695b      	ldr	r3, [r3, #20]
 8001670:	f003 0304 	and.w	r3, r3, #4
 8001674:	2b04      	cmp	r3, #4
 8001676:	d1d9      	bne.n	800162c <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001686:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	691a      	ldr	r2, [r3, #16]
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001692:	b2d2      	uxtb	r2, r2
 8001694:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800169a:	1c5a      	adds	r2, r3, #1
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016a4:	3b01      	subs	r3, #1
 80016a6:	b29a      	uxth	r2, r3
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	3b01      	subs	r3, #1
 80016b4:	b29a      	uxth	r2, r3
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80016ba:	b662      	cpsie	i
}
 80016bc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	691a      	ldr	r2, [r3, #16]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c8:	b2d2      	uxtb	r2, r2
 80016ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d0:	1c5a      	adds	r2, r3, #1
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016da:	3b01      	subs	r3, #1
 80016dc:	b29a      	uxth	r2, r3
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	3b01      	subs	r3, #1
 80016ea:	b29a      	uxth	r2, r3
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80016f0:	e04e      	b.n	8001790 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80016f6:	68f8      	ldr	r0, [r7, #12]
 80016f8:	f000 fb62 	bl	8001dc0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e058      	b.n	80017b8 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	691a      	ldr	r2, [r3, #16]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001710:	b2d2      	uxtb	r2, r2
 8001712:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001718:	1c5a      	adds	r2, r3, #1
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001722:	3b01      	subs	r3, #1
 8001724:	b29a      	uxth	r2, r3
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800172e:	b29b      	uxth	r3, r3
 8001730:	3b01      	subs	r3, #1
 8001732:	b29a      	uxth	r2, r3
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	695b      	ldr	r3, [r3, #20]
 800173e:	f003 0304 	and.w	r3, r3, #4
 8001742:	2b04      	cmp	r3, #4
 8001744:	d124      	bne.n	8001790 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800174a:	2b03      	cmp	r3, #3
 800174c:	d107      	bne.n	800175e <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800175c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	691a      	ldr	r2, [r3, #16]
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001768:	b2d2      	uxtb	r2, r2
 800176a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001770:	1c5a      	adds	r2, r3, #1
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800177a:	3b01      	subs	r3, #1
 800177c:	b29a      	uxth	r2, r3
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001786:	b29b      	uxth	r3, r3
 8001788:	3b01      	subs	r3, #1
 800178a:	b29a      	uxth	r2, r3
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001794:	2b00      	cmp	r3, #0
 8001796:	f47f ae88 	bne.w	80014aa <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	2220      	movs	r2, #32
 800179e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	2200      	movs	r2, #0
 80017a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2200      	movs	r2, #0
 80017ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80017b2:	2300      	movs	r3, #0
 80017b4:	e000      	b.n	80017b8 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80017b6:	2302      	movs	r3, #2
  }
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3728      	adds	r7, #40	; 0x28
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	00010004 	.word	0x00010004
 80017c4:	20000034 	.word	0x20000034
 80017c8:	14f8b589 	.word	0x14f8b589

080017cc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b088      	sub	sp, #32
 80017d0:	af02      	add	r7, sp, #8
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	607a      	str	r2, [r7, #4]
 80017d6:	603b      	str	r3, [r7, #0]
 80017d8:	460b      	mov	r3, r1
 80017da:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	2b08      	cmp	r3, #8
 80017e6:	d006      	beq.n	80017f6 <I2C_MasterRequestWrite+0x2a>
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d003      	beq.n	80017f6 <I2C_MasterRequestWrite+0x2a>
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80017f4:	d108      	bne.n	8001808 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	e00b      	b.n	8001820 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180c:	2b12      	cmp	r3, #18
 800180e:	d107      	bne.n	8001820 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800181e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	9300      	str	r3, [sp, #0]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800182c:	68f8      	ldr	r0, [r7, #12]
 800182e:	f000 f91d 	bl	8001a6c <I2C_WaitOnFlagUntilTimeout>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d00d      	beq.n	8001854 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001842:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001846:	d103      	bne.n	8001850 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800184e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e035      	b.n	80018c0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	691b      	ldr	r3, [r3, #16]
 8001858:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800185c:	d108      	bne.n	8001870 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800185e:	897b      	ldrh	r3, [r7, #10]
 8001860:	b2db      	uxtb	r3, r3
 8001862:	461a      	mov	r2, r3
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800186c:	611a      	str	r2, [r3, #16]
 800186e:	e01b      	b.n	80018a8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001870:	897b      	ldrh	r3, [r7, #10]
 8001872:	11db      	asrs	r3, r3, #7
 8001874:	b2db      	uxtb	r3, r3
 8001876:	f003 0306 	and.w	r3, r3, #6
 800187a:	b2db      	uxtb	r3, r3
 800187c:	f063 030f 	orn	r3, r3, #15
 8001880:	b2da      	uxtb	r2, r3
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	490e      	ldr	r1, [pc, #56]	; (80018c8 <I2C_MasterRequestWrite+0xfc>)
 800188e:	68f8      	ldr	r0, [r7, #12]
 8001890:	f000 f966 	bl	8001b60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e010      	b.n	80018c0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800189e:	897b      	ldrh	r3, [r7, #10]
 80018a0:	b2da      	uxtb	r2, r3
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	4907      	ldr	r1, [pc, #28]	; (80018cc <I2C_MasterRequestWrite+0x100>)
 80018ae:	68f8      	ldr	r0, [r7, #12]
 80018b0:	f000 f956 	bl	8001b60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e000      	b.n	80018c0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80018be:	2300      	movs	r3, #0
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3718      	adds	r7, #24
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	00010008 	.word	0x00010008
 80018cc:	00010002 	.word	0x00010002

080018d0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b088      	sub	sp, #32
 80018d4:	af02      	add	r7, sp, #8
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	607a      	str	r2, [r7, #4]
 80018da:	603b      	str	r3, [r7, #0]
 80018dc:	460b      	mov	r3, r1
 80018de:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80018f4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	2b08      	cmp	r3, #8
 80018fa:	d006      	beq.n	800190a <I2C_MasterRequestRead+0x3a>
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d003      	beq.n	800190a <I2C_MasterRequestRead+0x3a>
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001908:	d108      	bne.n	800191c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	e00b      	b.n	8001934 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001920:	2b11      	cmp	r3, #17
 8001922:	d107      	bne.n	8001934 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001932:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	9300      	str	r3, [sp, #0]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001940:	68f8      	ldr	r0, [r7, #12]
 8001942:	f000 f893 	bl	8001a6c <I2C_WaitOnFlagUntilTimeout>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d00d      	beq.n	8001968 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001956:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800195a:	d103      	bne.n	8001964 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001962:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e079      	b.n	8001a5c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	691b      	ldr	r3, [r3, #16]
 800196c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001970:	d108      	bne.n	8001984 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001972:	897b      	ldrh	r3, [r7, #10]
 8001974:	b2db      	uxtb	r3, r3
 8001976:	f043 0301 	orr.w	r3, r3, #1
 800197a:	b2da      	uxtb	r2, r3
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	611a      	str	r2, [r3, #16]
 8001982:	e05f      	b.n	8001a44 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001984:	897b      	ldrh	r3, [r7, #10]
 8001986:	11db      	asrs	r3, r3, #7
 8001988:	b2db      	uxtb	r3, r3
 800198a:	f003 0306 	and.w	r3, r3, #6
 800198e:	b2db      	uxtb	r3, r3
 8001990:	f063 030f 	orn	r3, r3, #15
 8001994:	b2da      	uxtb	r2, r3
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	4930      	ldr	r1, [pc, #192]	; (8001a64 <I2C_MasterRequestRead+0x194>)
 80019a2:	68f8      	ldr	r0, [r7, #12]
 80019a4:	f000 f8dc 	bl	8001b60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e054      	b.n	8001a5c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80019b2:	897b      	ldrh	r3, [r7, #10]
 80019b4:	b2da      	uxtb	r2, r3
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	4929      	ldr	r1, [pc, #164]	; (8001a68 <I2C_MasterRequestRead+0x198>)
 80019c2:	68f8      	ldr	r0, [r7, #12]
 80019c4:	f000 f8cc 	bl	8001b60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e044      	b.n	8001a5c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019d2:	2300      	movs	r3, #0
 80019d4:	613b      	str	r3, [r7, #16]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	695b      	ldr	r3, [r3, #20]
 80019dc:	613b      	str	r3, [r7, #16]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	613b      	str	r3, [r7, #16]
 80019e6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80019f6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	9300      	str	r3, [sp, #0]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001a04:	68f8      	ldr	r0, [r7, #12]
 8001a06:	f000 f831 	bl	8001a6c <I2C_WaitOnFlagUntilTimeout>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d00d      	beq.n	8001a2c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a1e:	d103      	bne.n	8001a28 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a26:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	e017      	b.n	8001a5c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001a2c:	897b      	ldrh	r3, [r7, #10]
 8001a2e:	11db      	asrs	r3, r3, #7
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	f003 0306 	and.w	r3, r3, #6
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	f063 030e 	orn	r3, r3, #14
 8001a3c:	b2da      	uxtb	r2, r3
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	4907      	ldr	r1, [pc, #28]	; (8001a68 <I2C_MasterRequestRead+0x198>)
 8001a4a:	68f8      	ldr	r0, [r7, #12]
 8001a4c:	f000 f888 	bl	8001b60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e000      	b.n	8001a5c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8001a5a:	2300      	movs	r3, #0
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3718      	adds	r7, #24
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	00010008 	.word	0x00010008
 8001a68:	00010002 	.word	0x00010002

08001a6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	603b      	str	r3, [r7, #0]
 8001a78:	4613      	mov	r3, r2
 8001a7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a7c:	e048      	b.n	8001b10 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a84:	d044      	beq.n	8001b10 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a86:	f7fe ff5d 	bl	8000944 <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	683a      	ldr	r2, [r7, #0]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d302      	bcc.n	8001a9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d139      	bne.n	8001b10 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	0c1b      	lsrs	r3, r3, #16
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d10d      	bne.n	8001ac2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	695b      	ldr	r3, [r3, #20]
 8001aac:	43da      	mvns	r2, r3
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	bf0c      	ite	eq
 8001ab8:	2301      	moveq	r3, #1
 8001aba:	2300      	movne	r3, #0
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	461a      	mov	r2, r3
 8001ac0:	e00c      	b.n	8001adc <I2C_WaitOnFlagUntilTimeout+0x70>
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	43da      	mvns	r2, r3
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	4013      	ands	r3, r2
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	bf0c      	ite	eq
 8001ad4:	2301      	moveq	r3, #1
 8001ad6:	2300      	movne	r3, #0
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	461a      	mov	r2, r3
 8001adc:	79fb      	ldrb	r3, [r7, #7]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d116      	bne.n	8001b10 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2220      	movs	r2, #32
 8001aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2200      	movs	r2, #0
 8001af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afc:	f043 0220 	orr.w	r2, r3, #32
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2200      	movs	r2, #0
 8001b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e023      	b.n	8001b58 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	0c1b      	lsrs	r3, r3, #16
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d10d      	bne.n	8001b36 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	695b      	ldr	r3, [r3, #20]
 8001b20:	43da      	mvns	r2, r3
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	4013      	ands	r3, r2
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	bf0c      	ite	eq
 8001b2c:	2301      	moveq	r3, #1
 8001b2e:	2300      	movne	r3, #0
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	461a      	mov	r2, r3
 8001b34:	e00c      	b.n	8001b50 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	699b      	ldr	r3, [r3, #24]
 8001b3c:	43da      	mvns	r2, r3
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	4013      	ands	r3, r2
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	bf0c      	ite	eq
 8001b48:	2301      	moveq	r3, #1
 8001b4a:	2300      	movne	r3, #0
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	461a      	mov	r2, r3
 8001b50:	79fb      	ldrb	r3, [r7, #7]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d093      	beq.n	8001a7e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001b56:	2300      	movs	r3, #0
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3710      	adds	r7, #16
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	607a      	str	r2, [r7, #4]
 8001b6c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001b6e:	e071      	b.n	8001c54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	695b      	ldr	r3, [r3, #20]
 8001b76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b7e:	d123      	bne.n	8001bc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b8e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001b98:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2220      	movs	r2, #32
 8001ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb4:	f043 0204 	orr.w	r2, r3, #4
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e067      	b.n	8001c98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bce:	d041      	beq.n	8001c54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bd0:	f7fe feb8 	bl	8000944 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d302      	bcc.n	8001be6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d136      	bne.n	8001c54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	0c1b      	lsrs	r3, r3, #16
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d10c      	bne.n	8001c0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	695b      	ldr	r3, [r3, #20]
 8001bf6:	43da      	mvns	r2, r3
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	bf14      	ite	ne
 8001c02:	2301      	movne	r3, #1
 8001c04:	2300      	moveq	r3, #0
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	e00b      	b.n	8001c22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	43da      	mvns	r2, r3
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	4013      	ands	r3, r2
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	bf14      	ite	ne
 8001c1c:	2301      	movne	r3, #1
 8001c1e:	2300      	moveq	r3, #0
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d016      	beq.n	8001c54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2220      	movs	r2, #32
 8001c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c40:	f043 0220 	orr.w	r2, r3, #32
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e021      	b.n	8001c98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	0c1b      	lsrs	r3, r3, #16
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d10c      	bne.n	8001c78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	695b      	ldr	r3, [r3, #20]
 8001c64:	43da      	mvns	r2, r3
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	bf14      	ite	ne
 8001c70:	2301      	movne	r3, #1
 8001c72:	2300      	moveq	r3, #0
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	e00b      	b.n	8001c90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	699b      	ldr	r3, [r3, #24]
 8001c7e:	43da      	mvns	r2, r3
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	4013      	ands	r3, r2
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	bf14      	ite	ne
 8001c8a:	2301      	movne	r3, #1
 8001c8c:	2300      	moveq	r3, #0
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	f47f af6d 	bne.w	8001b70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001c96:	2300      	movs	r3, #0
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3710      	adds	r7, #16
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001cac:	e034      	b.n	8001d18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001cae:	68f8      	ldr	r0, [r7, #12]
 8001cb0:	f000 f8e3 	bl	8001e7a <I2C_IsAcknowledgeFailed>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e034      	b.n	8001d28 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cc4:	d028      	beq.n	8001d18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cc6:	f7fe fe3d 	bl	8000944 <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	68ba      	ldr	r2, [r7, #8]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d302      	bcc.n	8001cdc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d11d      	bne.n	8001d18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	695b      	ldr	r3, [r3, #20]
 8001ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ce6:	2b80      	cmp	r3, #128	; 0x80
 8001ce8:	d016      	beq.n	8001d18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2200      	movs	r2, #0
 8001cee:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2220      	movs	r2, #32
 8001cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d04:	f043 0220 	orr.w	r2, r3, #32
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e007      	b.n	8001d28 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	695b      	ldr	r3, [r3, #20]
 8001d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d22:	2b80      	cmp	r3, #128	; 0x80
 8001d24:	d1c3      	bne.n	8001cae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3710      	adds	r7, #16
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001d3c:	e034      	b.n	8001da8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001d3e:	68f8      	ldr	r0, [r7, #12]
 8001d40:	f000 f89b 	bl	8001e7a <I2C_IsAcknowledgeFailed>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e034      	b.n	8001db8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d54:	d028      	beq.n	8001da8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d56:	f7fe fdf5 	bl	8000944 <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	68ba      	ldr	r2, [r7, #8]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d302      	bcc.n	8001d6c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d11d      	bne.n	8001da8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	695b      	ldr	r3, [r3, #20]
 8001d72:	f003 0304 	and.w	r3, r3, #4
 8001d76:	2b04      	cmp	r3, #4
 8001d78:	d016      	beq.n	8001da8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2220      	movs	r2, #32
 8001d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d94:	f043 0220 	orr.w	r2, r3, #32
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e007      	b.n	8001db8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	695b      	ldr	r3, [r3, #20]
 8001dae:	f003 0304 	and.w	r3, r3, #4
 8001db2:	2b04      	cmp	r3, #4
 8001db4:	d1c3      	bne.n	8001d3e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3710      	adds	r7, #16
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001dcc:	e049      	b.n	8001e62 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	695b      	ldr	r3, [r3, #20]
 8001dd4:	f003 0310 	and.w	r3, r3, #16
 8001dd8:	2b10      	cmp	r3, #16
 8001dda:	d119      	bne.n	8001e10 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f06f 0210 	mvn.w	r2, #16
 8001de4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2200      	movs	r2, #0
 8001dea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2220      	movs	r2, #32
 8001df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2200      	movs	r2, #0
 8001df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2200      	movs	r2, #0
 8001e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e030      	b.n	8001e72 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e10:	f7fe fd98 	bl	8000944 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	68ba      	ldr	r2, [r7, #8]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d302      	bcc.n	8001e26 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d11d      	bne.n	8001e62 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	695b      	ldr	r3, [r3, #20]
 8001e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e30:	2b40      	cmp	r3, #64	; 0x40
 8001e32:	d016      	beq.n	8001e62 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2200      	movs	r2, #0
 8001e38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2220      	movs	r2, #32
 8001e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4e:	f043 0220 	orr.w	r2, r3, #32
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e007      	b.n	8001e72 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	695b      	ldr	r3, [r3, #20]
 8001e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e6c:	2b40      	cmp	r3, #64	; 0x40
 8001e6e:	d1ae      	bne.n	8001dce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	b083      	sub	sp, #12
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	695b      	ldr	r3, [r3, #20]
 8001e88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e90:	d11b      	bne.n	8001eca <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001e9a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2220      	movs	r2, #32
 8001ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb6:	f043 0204 	orr.w	r2, r3, #4
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e000      	b.n	8001ecc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001eca:	2300      	movs	r3, #0
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bc80      	pop	{r7}
 8001ed4:	4770      	bx	lr
	...

08001ed8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e272      	b.n	80023d0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	f000 8087 	beq.w	8002006 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ef8:	4b92      	ldr	r3, [pc, #584]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f003 030c 	and.w	r3, r3, #12
 8001f00:	2b04      	cmp	r3, #4
 8001f02:	d00c      	beq.n	8001f1e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f04:	4b8f      	ldr	r3, [pc, #572]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f003 030c 	and.w	r3, r3, #12
 8001f0c:	2b08      	cmp	r3, #8
 8001f0e:	d112      	bne.n	8001f36 <HAL_RCC_OscConfig+0x5e>
 8001f10:	4b8c      	ldr	r3, [pc, #560]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f1c:	d10b      	bne.n	8001f36 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f1e:	4b89      	ldr	r3, [pc, #548]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d06c      	beq.n	8002004 <HAL_RCC_OscConfig+0x12c>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d168      	bne.n	8002004 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e24c      	b.n	80023d0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f3e:	d106      	bne.n	8001f4e <HAL_RCC_OscConfig+0x76>
 8001f40:	4b80      	ldr	r3, [pc, #512]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a7f      	ldr	r2, [pc, #508]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 8001f46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f4a:	6013      	str	r3, [r2, #0]
 8001f4c:	e02e      	b.n	8001fac <HAL_RCC_OscConfig+0xd4>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d10c      	bne.n	8001f70 <HAL_RCC_OscConfig+0x98>
 8001f56:	4b7b      	ldr	r3, [pc, #492]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a7a      	ldr	r2, [pc, #488]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 8001f5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f60:	6013      	str	r3, [r2, #0]
 8001f62:	4b78      	ldr	r3, [pc, #480]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a77      	ldr	r2, [pc, #476]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 8001f68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f6c:	6013      	str	r3, [r2, #0]
 8001f6e:	e01d      	b.n	8001fac <HAL_RCC_OscConfig+0xd4>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f78:	d10c      	bne.n	8001f94 <HAL_RCC_OscConfig+0xbc>
 8001f7a:	4b72      	ldr	r3, [pc, #456]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a71      	ldr	r2, [pc, #452]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 8001f80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f84:	6013      	str	r3, [r2, #0]
 8001f86:	4b6f      	ldr	r3, [pc, #444]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a6e      	ldr	r2, [pc, #440]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 8001f8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f90:	6013      	str	r3, [r2, #0]
 8001f92:	e00b      	b.n	8001fac <HAL_RCC_OscConfig+0xd4>
 8001f94:	4b6b      	ldr	r3, [pc, #428]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a6a      	ldr	r2, [pc, #424]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 8001f9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f9e:	6013      	str	r3, [r2, #0]
 8001fa0:	4b68      	ldr	r3, [pc, #416]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a67      	ldr	r2, [pc, #412]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 8001fa6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001faa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d013      	beq.n	8001fdc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb4:	f7fe fcc6 	bl	8000944 <HAL_GetTick>
 8001fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fba:	e008      	b.n	8001fce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fbc:	f7fe fcc2 	bl	8000944 <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	2b64      	cmp	r3, #100	; 0x64
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e200      	b.n	80023d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fce:	4b5d      	ldr	r3, [pc, #372]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d0f0      	beq.n	8001fbc <HAL_RCC_OscConfig+0xe4>
 8001fda:	e014      	b.n	8002006 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fdc:	f7fe fcb2 	bl	8000944 <HAL_GetTick>
 8001fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fe2:	e008      	b.n	8001ff6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fe4:	f7fe fcae 	bl	8000944 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b64      	cmp	r3, #100	; 0x64
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e1ec      	b.n	80023d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ff6:	4b53      	ldr	r3, [pc, #332]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1f0      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x10c>
 8002002:	e000      	b.n	8002006 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002004:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d063      	beq.n	80020da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002012:	4b4c      	ldr	r3, [pc, #304]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f003 030c 	and.w	r3, r3, #12
 800201a:	2b00      	cmp	r3, #0
 800201c:	d00b      	beq.n	8002036 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800201e:	4b49      	ldr	r3, [pc, #292]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f003 030c 	and.w	r3, r3, #12
 8002026:	2b08      	cmp	r3, #8
 8002028:	d11c      	bne.n	8002064 <HAL_RCC_OscConfig+0x18c>
 800202a:	4b46      	ldr	r3, [pc, #280]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d116      	bne.n	8002064 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002036:	4b43      	ldr	r3, [pc, #268]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d005      	beq.n	800204e <HAL_RCC_OscConfig+0x176>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	2b01      	cmp	r3, #1
 8002048:	d001      	beq.n	800204e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e1c0      	b.n	80023d0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800204e:	4b3d      	ldr	r3, [pc, #244]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	695b      	ldr	r3, [r3, #20]
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	4939      	ldr	r1, [pc, #228]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 800205e:	4313      	orrs	r3, r2
 8002060:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002062:	e03a      	b.n	80020da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	691b      	ldr	r3, [r3, #16]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d020      	beq.n	80020ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800206c:	4b36      	ldr	r3, [pc, #216]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 800206e:	2201      	movs	r2, #1
 8002070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002072:	f7fe fc67 	bl	8000944 <HAL_GetTick>
 8002076:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002078:	e008      	b.n	800208c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800207a:	f7fe fc63 	bl	8000944 <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b02      	cmp	r3, #2
 8002086:	d901      	bls.n	800208c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e1a1      	b.n	80023d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800208c:	4b2d      	ldr	r3, [pc, #180]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0302 	and.w	r3, r3, #2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d0f0      	beq.n	800207a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002098:	4b2a      	ldr	r3, [pc, #168]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	695b      	ldr	r3, [r3, #20]
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	4927      	ldr	r1, [pc, #156]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	600b      	str	r3, [r1, #0]
 80020ac:	e015      	b.n	80020da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020ae:	4b26      	ldr	r3, [pc, #152]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b4:	f7fe fc46 	bl	8000944 <HAL_GetTick>
 80020b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ba:	e008      	b.n	80020ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020bc:	f7fe fc42 	bl	8000944 <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e180      	b.n	80023d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ce:	4b1d      	ldr	r3, [pc, #116]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d1f0      	bne.n	80020bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0308 	and.w	r3, r3, #8
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d03a      	beq.n	800215c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	699b      	ldr	r3, [r3, #24]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d019      	beq.n	8002122 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020ee:	4b17      	ldr	r3, [pc, #92]	; (800214c <HAL_RCC_OscConfig+0x274>)
 80020f0:	2201      	movs	r2, #1
 80020f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020f4:	f7fe fc26 	bl	8000944 <HAL_GetTick>
 80020f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020fa:	e008      	b.n	800210e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020fc:	f7fe fc22 	bl	8000944 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b02      	cmp	r3, #2
 8002108:	d901      	bls.n	800210e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e160      	b.n	80023d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800210e:	4b0d      	ldr	r3, [pc, #52]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 8002110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d0f0      	beq.n	80020fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800211a:	2001      	movs	r0, #1
 800211c:	f000 face 	bl	80026bc <RCC_Delay>
 8002120:	e01c      	b.n	800215c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002122:	4b0a      	ldr	r3, [pc, #40]	; (800214c <HAL_RCC_OscConfig+0x274>)
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002128:	f7fe fc0c 	bl	8000944 <HAL_GetTick>
 800212c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800212e:	e00f      	b.n	8002150 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002130:	f7fe fc08 	bl	8000944 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b02      	cmp	r3, #2
 800213c:	d908      	bls.n	8002150 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e146      	b.n	80023d0 <HAL_RCC_OscConfig+0x4f8>
 8002142:	bf00      	nop
 8002144:	40021000 	.word	0x40021000
 8002148:	42420000 	.word	0x42420000
 800214c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002150:	4b92      	ldr	r3, [pc, #584]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 8002152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002154:	f003 0302 	and.w	r3, r3, #2
 8002158:	2b00      	cmp	r3, #0
 800215a:	d1e9      	bne.n	8002130 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0304 	and.w	r3, r3, #4
 8002164:	2b00      	cmp	r3, #0
 8002166:	f000 80a6 	beq.w	80022b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800216a:	2300      	movs	r3, #0
 800216c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800216e:	4b8b      	ldr	r3, [pc, #556]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 8002170:	69db      	ldr	r3, [r3, #28]
 8002172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d10d      	bne.n	8002196 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800217a:	4b88      	ldr	r3, [pc, #544]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 800217c:	69db      	ldr	r3, [r3, #28]
 800217e:	4a87      	ldr	r2, [pc, #540]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 8002180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002184:	61d3      	str	r3, [r2, #28]
 8002186:	4b85      	ldr	r3, [pc, #532]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 8002188:	69db      	ldr	r3, [r3, #28]
 800218a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800218e:	60bb      	str	r3, [r7, #8]
 8002190:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002192:	2301      	movs	r3, #1
 8002194:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002196:	4b82      	ldr	r3, [pc, #520]	; (80023a0 <HAL_RCC_OscConfig+0x4c8>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d118      	bne.n	80021d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021a2:	4b7f      	ldr	r3, [pc, #508]	; (80023a0 <HAL_RCC_OscConfig+0x4c8>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a7e      	ldr	r2, [pc, #504]	; (80023a0 <HAL_RCC_OscConfig+0x4c8>)
 80021a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021ae:	f7fe fbc9 	bl	8000944 <HAL_GetTick>
 80021b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b4:	e008      	b.n	80021c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021b6:	f7fe fbc5 	bl	8000944 <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	2b64      	cmp	r3, #100	; 0x64
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e103      	b.n	80023d0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c8:	4b75      	ldr	r3, [pc, #468]	; (80023a0 <HAL_RCC_OscConfig+0x4c8>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d0f0      	beq.n	80021b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d106      	bne.n	80021ea <HAL_RCC_OscConfig+0x312>
 80021dc:	4b6f      	ldr	r3, [pc, #444]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 80021de:	6a1b      	ldr	r3, [r3, #32]
 80021e0:	4a6e      	ldr	r2, [pc, #440]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 80021e2:	f043 0301 	orr.w	r3, r3, #1
 80021e6:	6213      	str	r3, [r2, #32]
 80021e8:	e02d      	b.n	8002246 <HAL_RCC_OscConfig+0x36e>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d10c      	bne.n	800220c <HAL_RCC_OscConfig+0x334>
 80021f2:	4b6a      	ldr	r3, [pc, #424]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 80021f4:	6a1b      	ldr	r3, [r3, #32]
 80021f6:	4a69      	ldr	r2, [pc, #420]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 80021f8:	f023 0301 	bic.w	r3, r3, #1
 80021fc:	6213      	str	r3, [r2, #32]
 80021fe:	4b67      	ldr	r3, [pc, #412]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 8002200:	6a1b      	ldr	r3, [r3, #32]
 8002202:	4a66      	ldr	r2, [pc, #408]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 8002204:	f023 0304 	bic.w	r3, r3, #4
 8002208:	6213      	str	r3, [r2, #32]
 800220a:	e01c      	b.n	8002246 <HAL_RCC_OscConfig+0x36e>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	2b05      	cmp	r3, #5
 8002212:	d10c      	bne.n	800222e <HAL_RCC_OscConfig+0x356>
 8002214:	4b61      	ldr	r3, [pc, #388]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 8002216:	6a1b      	ldr	r3, [r3, #32]
 8002218:	4a60      	ldr	r2, [pc, #384]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 800221a:	f043 0304 	orr.w	r3, r3, #4
 800221e:	6213      	str	r3, [r2, #32]
 8002220:	4b5e      	ldr	r3, [pc, #376]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 8002222:	6a1b      	ldr	r3, [r3, #32]
 8002224:	4a5d      	ldr	r2, [pc, #372]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 8002226:	f043 0301 	orr.w	r3, r3, #1
 800222a:	6213      	str	r3, [r2, #32]
 800222c:	e00b      	b.n	8002246 <HAL_RCC_OscConfig+0x36e>
 800222e:	4b5b      	ldr	r3, [pc, #364]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 8002230:	6a1b      	ldr	r3, [r3, #32]
 8002232:	4a5a      	ldr	r2, [pc, #360]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 8002234:	f023 0301 	bic.w	r3, r3, #1
 8002238:	6213      	str	r3, [r2, #32]
 800223a:	4b58      	ldr	r3, [pc, #352]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 800223c:	6a1b      	ldr	r3, [r3, #32]
 800223e:	4a57      	ldr	r2, [pc, #348]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 8002240:	f023 0304 	bic.w	r3, r3, #4
 8002244:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d015      	beq.n	800227a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800224e:	f7fe fb79 	bl	8000944 <HAL_GetTick>
 8002252:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002254:	e00a      	b.n	800226c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002256:	f7fe fb75 	bl	8000944 <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	f241 3288 	movw	r2, #5000	; 0x1388
 8002264:	4293      	cmp	r3, r2
 8002266:	d901      	bls.n	800226c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e0b1      	b.n	80023d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800226c:	4b4b      	ldr	r3, [pc, #300]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 800226e:	6a1b      	ldr	r3, [r3, #32]
 8002270:	f003 0302 	and.w	r3, r3, #2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d0ee      	beq.n	8002256 <HAL_RCC_OscConfig+0x37e>
 8002278:	e014      	b.n	80022a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800227a:	f7fe fb63 	bl	8000944 <HAL_GetTick>
 800227e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002280:	e00a      	b.n	8002298 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002282:	f7fe fb5f 	bl	8000944 <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002290:	4293      	cmp	r3, r2
 8002292:	d901      	bls.n	8002298 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e09b      	b.n	80023d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002298:	4b40      	ldr	r3, [pc, #256]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 800229a:	6a1b      	ldr	r3, [r3, #32]
 800229c:	f003 0302 	and.w	r3, r3, #2
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d1ee      	bne.n	8002282 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022a4:	7dfb      	ldrb	r3, [r7, #23]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d105      	bne.n	80022b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022aa:	4b3c      	ldr	r3, [pc, #240]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 80022ac:	69db      	ldr	r3, [r3, #28]
 80022ae:	4a3b      	ldr	r2, [pc, #236]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 80022b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	69db      	ldr	r3, [r3, #28]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	f000 8087 	beq.w	80023ce <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022c0:	4b36      	ldr	r3, [pc, #216]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f003 030c 	and.w	r3, r3, #12
 80022c8:	2b08      	cmp	r3, #8
 80022ca:	d061      	beq.n	8002390 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	69db      	ldr	r3, [r3, #28]
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d146      	bne.n	8002362 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022d4:	4b33      	ldr	r3, [pc, #204]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022da:	f7fe fb33 	bl	8000944 <HAL_GetTick>
 80022de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022e0:	e008      	b.n	80022f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022e2:	f7fe fb2f 	bl	8000944 <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d901      	bls.n	80022f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e06d      	b.n	80023d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022f4:	4b29      	ldr	r3, [pc, #164]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d1f0      	bne.n	80022e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a1b      	ldr	r3, [r3, #32]
 8002304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002308:	d108      	bne.n	800231c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800230a:	4b24      	ldr	r3, [pc, #144]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	4921      	ldr	r1, [pc, #132]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 8002318:	4313      	orrs	r3, r2
 800231a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800231c:	4b1f      	ldr	r3, [pc, #124]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6a19      	ldr	r1, [r3, #32]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232c:	430b      	orrs	r3, r1
 800232e:	491b      	ldr	r1, [pc, #108]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 8002330:	4313      	orrs	r3, r2
 8002332:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002334:	4b1b      	ldr	r3, [pc, #108]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 8002336:	2201      	movs	r2, #1
 8002338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800233a:	f7fe fb03 	bl	8000944 <HAL_GetTick>
 800233e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002340:	e008      	b.n	8002354 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002342:	f7fe faff 	bl	8000944 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	2b02      	cmp	r3, #2
 800234e:	d901      	bls.n	8002354 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e03d      	b.n	80023d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002354:	4b11      	ldr	r3, [pc, #68]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d0f0      	beq.n	8002342 <HAL_RCC_OscConfig+0x46a>
 8002360:	e035      	b.n	80023ce <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002362:	4b10      	ldr	r3, [pc, #64]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002368:	f7fe faec 	bl	8000944 <HAL_GetTick>
 800236c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800236e:	e008      	b.n	8002382 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002370:	f7fe fae8 	bl	8000944 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b02      	cmp	r3, #2
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e026      	b.n	80023d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002382:	4b06      	ldr	r3, [pc, #24]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1f0      	bne.n	8002370 <HAL_RCC_OscConfig+0x498>
 800238e:	e01e      	b.n	80023ce <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	69db      	ldr	r3, [r3, #28]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d107      	bne.n	80023a8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e019      	b.n	80023d0 <HAL_RCC_OscConfig+0x4f8>
 800239c:	40021000 	.word	0x40021000
 80023a0:	40007000 	.word	0x40007000
 80023a4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023a8:	4b0b      	ldr	r3, [pc, #44]	; (80023d8 <HAL_RCC_OscConfig+0x500>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a1b      	ldr	r3, [r3, #32]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d106      	bne.n	80023ca <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d001      	beq.n	80023ce <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e000      	b.n	80023d0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3718      	adds	r7, #24
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40021000 	.word	0x40021000

080023dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d101      	bne.n	80023f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e0d0      	b.n	8002592 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023f0:	4b6a      	ldr	r3, [pc, #424]	; (800259c <HAL_RCC_ClockConfig+0x1c0>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0307 	and.w	r3, r3, #7
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d910      	bls.n	8002420 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023fe:	4b67      	ldr	r3, [pc, #412]	; (800259c <HAL_RCC_ClockConfig+0x1c0>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f023 0207 	bic.w	r2, r3, #7
 8002406:	4965      	ldr	r1, [pc, #404]	; (800259c <HAL_RCC_ClockConfig+0x1c0>)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	4313      	orrs	r3, r2
 800240c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800240e:	4b63      	ldr	r3, [pc, #396]	; (800259c <HAL_RCC_ClockConfig+0x1c0>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0307 	and.w	r3, r3, #7
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	429a      	cmp	r2, r3
 800241a:	d001      	beq.n	8002420 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e0b8      	b.n	8002592 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	2b00      	cmp	r3, #0
 800242a:	d020      	beq.n	800246e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0304 	and.w	r3, r3, #4
 8002434:	2b00      	cmp	r3, #0
 8002436:	d005      	beq.n	8002444 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002438:	4b59      	ldr	r3, [pc, #356]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	4a58      	ldr	r2, [pc, #352]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 800243e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002442:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0308 	and.w	r3, r3, #8
 800244c:	2b00      	cmp	r3, #0
 800244e:	d005      	beq.n	800245c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002450:	4b53      	ldr	r3, [pc, #332]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	4a52      	ldr	r2, [pc, #328]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002456:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800245a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800245c:	4b50      	ldr	r3, [pc, #320]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	494d      	ldr	r1, [pc, #308]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 800246a:	4313      	orrs	r3, r2
 800246c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	2b00      	cmp	r3, #0
 8002478:	d040      	beq.n	80024fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d107      	bne.n	8002492 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002482:	4b47      	ldr	r3, [pc, #284]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d115      	bne.n	80024ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e07f      	b.n	8002592 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	2b02      	cmp	r3, #2
 8002498:	d107      	bne.n	80024aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800249a:	4b41      	ldr	r3, [pc, #260]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d109      	bne.n	80024ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e073      	b.n	8002592 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024aa:	4b3d      	ldr	r3, [pc, #244]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e06b      	b.n	8002592 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024ba:	4b39      	ldr	r3, [pc, #228]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f023 0203 	bic.w	r2, r3, #3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	4936      	ldr	r1, [pc, #216]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024cc:	f7fe fa3a 	bl	8000944 <HAL_GetTick>
 80024d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024d2:	e00a      	b.n	80024ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024d4:	f7fe fa36 	bl	8000944 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e053      	b.n	8002592 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ea:	4b2d      	ldr	r3, [pc, #180]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f003 020c 	and.w	r2, r3, #12
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d1eb      	bne.n	80024d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024fc:	4b27      	ldr	r3, [pc, #156]	; (800259c <HAL_RCC_ClockConfig+0x1c0>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0307 	and.w	r3, r3, #7
 8002504:	683a      	ldr	r2, [r7, #0]
 8002506:	429a      	cmp	r2, r3
 8002508:	d210      	bcs.n	800252c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800250a:	4b24      	ldr	r3, [pc, #144]	; (800259c <HAL_RCC_ClockConfig+0x1c0>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f023 0207 	bic.w	r2, r3, #7
 8002512:	4922      	ldr	r1, [pc, #136]	; (800259c <HAL_RCC_ClockConfig+0x1c0>)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	4313      	orrs	r3, r2
 8002518:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800251a:	4b20      	ldr	r3, [pc, #128]	; (800259c <HAL_RCC_ClockConfig+0x1c0>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0307 	and.w	r3, r3, #7
 8002522:	683a      	ldr	r2, [r7, #0]
 8002524:	429a      	cmp	r2, r3
 8002526:	d001      	beq.n	800252c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e032      	b.n	8002592 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0304 	and.w	r3, r3, #4
 8002534:	2b00      	cmp	r3, #0
 8002536:	d008      	beq.n	800254a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002538:	4b19      	ldr	r3, [pc, #100]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	4916      	ldr	r1, [pc, #88]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002546:	4313      	orrs	r3, r2
 8002548:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0308 	and.w	r3, r3, #8
 8002552:	2b00      	cmp	r3, #0
 8002554:	d009      	beq.n	800256a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002556:	4b12      	ldr	r3, [pc, #72]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	490e      	ldr	r1, [pc, #56]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002566:	4313      	orrs	r3, r2
 8002568:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800256a:	f000 f821 	bl	80025b0 <HAL_RCC_GetSysClockFreq>
 800256e:	4602      	mov	r2, r0
 8002570:	4b0b      	ldr	r3, [pc, #44]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	091b      	lsrs	r3, r3, #4
 8002576:	f003 030f 	and.w	r3, r3, #15
 800257a:	490a      	ldr	r1, [pc, #40]	; (80025a4 <HAL_RCC_ClockConfig+0x1c8>)
 800257c:	5ccb      	ldrb	r3, [r1, r3]
 800257e:	fa22 f303 	lsr.w	r3, r2, r3
 8002582:	4a09      	ldr	r2, [pc, #36]	; (80025a8 <HAL_RCC_ClockConfig+0x1cc>)
 8002584:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002586:	4b09      	ldr	r3, [pc, #36]	; (80025ac <HAL_RCC_ClockConfig+0x1d0>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4618      	mov	r0, r3
 800258c:	f7fe f998 	bl	80008c0 <HAL_InitTick>

  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	40022000 	.word	0x40022000
 80025a0:	40021000 	.word	0x40021000
 80025a4:	08003610 	.word	0x08003610
 80025a8:	20000034 	.word	0x20000034
 80025ac:	20000038 	.word	0x20000038

080025b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b087      	sub	sp, #28
 80025b4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025b6:	2300      	movs	r3, #0
 80025b8:	60fb      	str	r3, [r7, #12]
 80025ba:	2300      	movs	r3, #0
 80025bc:	60bb      	str	r3, [r7, #8]
 80025be:	2300      	movs	r3, #0
 80025c0:	617b      	str	r3, [r7, #20]
 80025c2:	2300      	movs	r3, #0
 80025c4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80025c6:	2300      	movs	r3, #0
 80025c8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80025ca:	4b1e      	ldr	r3, [pc, #120]	; (8002644 <HAL_RCC_GetSysClockFreq+0x94>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f003 030c 	and.w	r3, r3, #12
 80025d6:	2b04      	cmp	r3, #4
 80025d8:	d002      	beq.n	80025e0 <HAL_RCC_GetSysClockFreq+0x30>
 80025da:	2b08      	cmp	r3, #8
 80025dc:	d003      	beq.n	80025e6 <HAL_RCC_GetSysClockFreq+0x36>
 80025de:	e027      	b.n	8002630 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025e0:	4b19      	ldr	r3, [pc, #100]	; (8002648 <HAL_RCC_GetSysClockFreq+0x98>)
 80025e2:	613b      	str	r3, [r7, #16]
      break;
 80025e4:	e027      	b.n	8002636 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	0c9b      	lsrs	r3, r3, #18
 80025ea:	f003 030f 	and.w	r3, r3, #15
 80025ee:	4a17      	ldr	r2, [pc, #92]	; (800264c <HAL_RCC_GetSysClockFreq+0x9c>)
 80025f0:	5cd3      	ldrb	r3, [r2, r3]
 80025f2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d010      	beq.n	8002620 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025fe:	4b11      	ldr	r3, [pc, #68]	; (8002644 <HAL_RCC_GetSysClockFreq+0x94>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	0c5b      	lsrs	r3, r3, #17
 8002604:	f003 0301 	and.w	r3, r3, #1
 8002608:	4a11      	ldr	r2, [pc, #68]	; (8002650 <HAL_RCC_GetSysClockFreq+0xa0>)
 800260a:	5cd3      	ldrb	r3, [r2, r3]
 800260c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a0d      	ldr	r2, [pc, #52]	; (8002648 <HAL_RCC_GetSysClockFreq+0x98>)
 8002612:	fb03 f202 	mul.w	r2, r3, r2
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	fbb2 f3f3 	udiv	r3, r2, r3
 800261c:	617b      	str	r3, [r7, #20]
 800261e:	e004      	b.n	800262a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4a0c      	ldr	r2, [pc, #48]	; (8002654 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002624:	fb02 f303 	mul.w	r3, r2, r3
 8002628:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	613b      	str	r3, [r7, #16]
      break;
 800262e:	e002      	b.n	8002636 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002630:	4b05      	ldr	r3, [pc, #20]	; (8002648 <HAL_RCC_GetSysClockFreq+0x98>)
 8002632:	613b      	str	r3, [r7, #16]
      break;
 8002634:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002636:	693b      	ldr	r3, [r7, #16]
}
 8002638:	4618      	mov	r0, r3
 800263a:	371c      	adds	r7, #28
 800263c:	46bd      	mov	sp, r7
 800263e:	bc80      	pop	{r7}
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	40021000 	.word	0x40021000
 8002648:	007a1200 	.word	0x007a1200
 800264c:	08003628 	.word	0x08003628
 8002650:	08003638 	.word	0x08003638
 8002654:	003d0900 	.word	0x003d0900

08002658 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800265c:	4b02      	ldr	r3, [pc, #8]	; (8002668 <HAL_RCC_GetHCLKFreq+0x10>)
 800265e:	681b      	ldr	r3, [r3, #0]
}
 8002660:	4618      	mov	r0, r3
 8002662:	46bd      	mov	sp, r7
 8002664:	bc80      	pop	{r7}
 8002666:	4770      	bx	lr
 8002668:	20000034 	.word	0x20000034

0800266c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002670:	f7ff fff2 	bl	8002658 <HAL_RCC_GetHCLKFreq>
 8002674:	4602      	mov	r2, r0
 8002676:	4b05      	ldr	r3, [pc, #20]	; (800268c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	0a1b      	lsrs	r3, r3, #8
 800267c:	f003 0307 	and.w	r3, r3, #7
 8002680:	4903      	ldr	r1, [pc, #12]	; (8002690 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002682:	5ccb      	ldrb	r3, [r1, r3]
 8002684:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002688:	4618      	mov	r0, r3
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40021000 	.word	0x40021000
 8002690:	08003620 	.word	0x08003620

08002694 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002698:	f7ff ffde 	bl	8002658 <HAL_RCC_GetHCLKFreq>
 800269c:	4602      	mov	r2, r0
 800269e:	4b05      	ldr	r3, [pc, #20]	; (80026b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	0adb      	lsrs	r3, r3, #11
 80026a4:	f003 0307 	and.w	r3, r3, #7
 80026a8:	4903      	ldr	r1, [pc, #12]	; (80026b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026aa:	5ccb      	ldrb	r3, [r1, r3]
 80026ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	40021000 	.word	0x40021000
 80026b8:	08003620 	.word	0x08003620

080026bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80026bc:	b480      	push	{r7}
 80026be:	b085      	sub	sp, #20
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80026c4:	4b0a      	ldr	r3, [pc, #40]	; (80026f0 <RCC_Delay+0x34>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a0a      	ldr	r2, [pc, #40]	; (80026f4 <RCC_Delay+0x38>)
 80026ca:	fba2 2303 	umull	r2, r3, r2, r3
 80026ce:	0a5b      	lsrs	r3, r3, #9
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	fb02 f303 	mul.w	r3, r2, r3
 80026d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80026d8:	bf00      	nop
  }
  while (Delay --);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	1e5a      	subs	r2, r3, #1
 80026de:	60fa      	str	r2, [r7, #12]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d1f9      	bne.n	80026d8 <RCC_Delay+0x1c>
}
 80026e4:	bf00      	nop
 80026e6:	bf00      	nop
 80026e8:	3714      	adds	r7, #20
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bc80      	pop	{r7}
 80026ee:	4770      	bx	lr
 80026f0:	20000034 	.word	0x20000034
 80026f4:	10624dd3 	.word	0x10624dd3

080026f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d101      	bne.n	800270a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e04d      	b.n	80027a6 <HAL_UART_Init+0xae>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b00      	cmp	r3, #0
 8002714:	d111      	bne.n	800273a <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f000 f926 	bl	8002970 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002728:	2b00      	cmp	r3, #0
 800272a:	d102      	bne.n	8002732 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	4a20      	ldr	r2, [pc, #128]	; (80027b0 <HAL_UART_Init+0xb8>)
 8002730:	671a      	str	r2, [r3, #112]	; 0x70
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2224      	movs	r2, #36	; 0x24
 800273e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68da      	ldr	r2, [r3, #12]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002750:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f000 f9fe 	bl	8002b54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	691a      	ldr	r2, [r3, #16]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002766:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	695a      	ldr	r2, [r3, #20]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002776:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68da      	ldr	r2, [r3, #12]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002786:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2220      	movs	r2, #32
 8002792:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2220      	movs	r2, #32
 800279a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	08000501 	.word	0x08000501

080027b4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b08a      	sub	sp, #40	; 0x28
 80027b8:	af02      	add	r7, sp, #8
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	603b      	str	r3, [r7, #0]
 80027c0:	4613      	mov	r3, r2
 80027c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80027c4:	2300      	movs	r3, #0
 80027c6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	2b20      	cmp	r3, #32
 80027d2:	d175      	bne.n	80028c0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d002      	beq.n	80027e0 <HAL_UART_Transmit+0x2c>
 80027da:	88fb      	ldrh	r3, [r7, #6]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d101      	bne.n	80027e4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e06e      	b.n	80028c2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2200      	movs	r2, #0
 80027e8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2221      	movs	r2, #33	; 0x21
 80027ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027f2:	f7fe f8a7 	bl	8000944 <HAL_GetTick>
 80027f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	88fa      	ldrh	r2, [r7, #6]
 80027fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	88fa      	ldrh	r2, [r7, #6]
 8002802:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800280c:	d108      	bne.n	8002820 <HAL_UART_Transmit+0x6c>
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d104      	bne.n	8002820 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002816:	2300      	movs	r3, #0
 8002818:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	61bb      	str	r3, [r7, #24]
 800281e:	e003      	b.n	8002828 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002824:	2300      	movs	r3, #0
 8002826:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002828:	e02e      	b.n	8002888 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	9300      	str	r3, [sp, #0]
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	2200      	movs	r2, #0
 8002832:	2180      	movs	r1, #128	; 0x80
 8002834:	68f8      	ldr	r0, [r7, #12]
 8002836:	f000 f8d1 	bl	80029dc <UART_WaitOnFlagUntilTimeout>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d005      	beq.n	800284c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2220      	movs	r2, #32
 8002844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e03a      	b.n	80028c2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d10b      	bne.n	800286a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	881b      	ldrh	r3, [r3, #0]
 8002856:	461a      	mov	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002860:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	3302      	adds	r3, #2
 8002866:	61bb      	str	r3, [r7, #24]
 8002868:	e007      	b.n	800287a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	781a      	ldrb	r2, [r3, #0]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	3301      	adds	r3, #1
 8002878:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800287e:	b29b      	uxth	r3, r3
 8002880:	3b01      	subs	r3, #1
 8002882:	b29a      	uxth	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800288c:	b29b      	uxth	r3, r3
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1cb      	bne.n	800282a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	9300      	str	r3, [sp, #0]
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	2200      	movs	r2, #0
 800289a:	2140      	movs	r1, #64	; 0x40
 800289c:	68f8      	ldr	r0, [r7, #12]
 800289e:	f000 f89d 	bl	80029dc <UART_WaitOnFlagUntilTimeout>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d005      	beq.n	80028b4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2220      	movs	r2, #32
 80028ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e006      	b.n	80028c2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2220      	movs	r2, #32
 80028b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80028bc:	2300      	movs	r3, #0
 80028be:	e000      	b.n	80028c2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80028c0:	2302      	movs	r3, #2
  }
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3720      	adds	r7, #32
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80028ca:	b480      	push	{r7}
 80028cc:	b083      	sub	sp, #12
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80028d2:	bf00      	nop
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bc80      	pop	{r7}
 80028da:	4770      	bx	lr

080028dc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80028e4:	bf00      	nop
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bc80      	pop	{r7}
 80028ec:	4770      	bx	lr

080028ee <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80028ee:	b480      	push	{r7}
 80028f0:	b083      	sub	sp, #12
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80028f6:	bf00      	nop
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bc80      	pop	{r7}
 80028fe:	4770      	bx	lr

08002900 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002908:	bf00      	nop
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	bc80      	pop	{r7}
 8002910:	4770      	bx	lr

08002912 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002912:	b480      	push	{r7}
 8002914:	b083      	sub	sp, #12
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800291a:	bf00      	nop
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	bc80      	pop	{r7}
 8002922:	4770      	bx	lr

08002924 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	bc80      	pop	{r7}
 8002934:	4770      	bx	lr

08002936 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8002936:	b480      	push	{r7}
 8002938:	b083      	sub	sp, #12
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800293e:	bf00      	nop
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	bc80      	pop	{r7}
 8002946:	4770      	bx	lr

08002948 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	bc80      	pop	{r7}
 8002958:	4770      	bx	lr

0800295a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800295a:	b480      	push	{r7}
 800295c:	b083      	sub	sp, #12
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
 8002962:	460b      	mov	r3, r1
 8002964:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002966:	bf00      	nop
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	bc80      	pop	{r7}
 800296e:	4770      	bx	lr

08002970 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4a0f      	ldr	r2, [pc, #60]	; (80029b8 <UART_InitCallbacksToDefault+0x48>)
 800297c:	649a      	str	r2, [r3, #72]	; 0x48
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a0e      	ldr	r2, [pc, #56]	; (80029bc <UART_InitCallbacksToDefault+0x4c>)
 8002982:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4a0e      	ldr	r2, [pc, #56]	; (80029c0 <UART_InitCallbacksToDefault+0x50>)
 8002988:	651a      	str	r2, [r3, #80]	; 0x50
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a0d      	ldr	r2, [pc, #52]	; (80029c4 <UART_InitCallbacksToDefault+0x54>)
 800298e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4a0d      	ldr	r2, [pc, #52]	; (80029c8 <UART_InitCallbacksToDefault+0x58>)
 8002994:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a0c      	ldr	r2, [pc, #48]	; (80029cc <UART_InitCallbacksToDefault+0x5c>)
 800299a:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a0c      	ldr	r2, [pc, #48]	; (80029d0 <UART_InitCallbacksToDefault+0x60>)
 80029a0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a0b      	ldr	r2, [pc, #44]	; (80029d4 <UART_InitCallbacksToDefault+0x64>)
 80029a6:	665a      	str	r2, [r3, #100]	; 0x64
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4a0b      	ldr	r2, [pc, #44]	; (80029d8 <UART_InitCallbacksToDefault+0x68>)
 80029ac:	66da      	str	r2, [r3, #108]	; 0x6c

}
 80029ae:	bf00      	nop
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bc80      	pop	{r7}
 80029b6:	4770      	bx	lr
 80029b8:	080028dd 	.word	0x080028dd
 80029bc:	080028cb 	.word	0x080028cb
 80029c0:	08002901 	.word	0x08002901
 80029c4:	080028ef 	.word	0x080028ef
 80029c8:	08002913 	.word	0x08002913
 80029cc:	08002925 	.word	0x08002925
 80029d0:	08002937 	.word	0x08002937
 80029d4:	08002949 	.word	0x08002949
 80029d8:	0800295b 	.word	0x0800295b

080029dc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b086      	sub	sp, #24
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	603b      	str	r3, [r7, #0]
 80029e8:	4613      	mov	r3, r2
 80029ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029ec:	e03b      	b.n	8002a66 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029ee:	6a3b      	ldr	r3, [r7, #32]
 80029f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f4:	d037      	beq.n	8002a66 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029f6:	f7fd ffa5 	bl	8000944 <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	6a3a      	ldr	r2, [r7, #32]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d302      	bcc.n	8002a0c <UART_WaitOnFlagUntilTimeout+0x30>
 8002a06:	6a3b      	ldr	r3, [r7, #32]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d101      	bne.n	8002a10 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e03a      	b.n	8002a86 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	f003 0304 	and.w	r3, r3, #4
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d023      	beq.n	8002a66 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	2b80      	cmp	r3, #128	; 0x80
 8002a22:	d020      	beq.n	8002a66 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	2b40      	cmp	r3, #64	; 0x40
 8002a28:	d01d      	beq.n	8002a66 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0308 	and.w	r3, r3, #8
 8002a34:	2b08      	cmp	r3, #8
 8002a36:	d116      	bne.n	8002a66 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002a38:	2300      	movs	r3, #0
 8002a3a:	617b      	str	r3, [r7, #20]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	617b      	str	r3, [r7, #20]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	617b      	str	r3, [r7, #20]
 8002a4c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002a4e:	68f8      	ldr	r0, [r7, #12]
 8002a50:	f000 f81d 	bl	8002a8e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2208      	movs	r2, #8
 8002a58:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e00f      	b.n	8002a86 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	4013      	ands	r3, r2
 8002a70:	68ba      	ldr	r2, [r7, #8]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	bf0c      	ite	eq
 8002a76:	2301      	moveq	r3, #1
 8002a78:	2300      	movne	r3, #0
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	79fb      	ldrb	r3, [r7, #7]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d0b4      	beq.n	80029ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3718      	adds	r7, #24
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a8e:	b480      	push	{r7}
 8002a90:	b095      	sub	sp, #84	; 0x54
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	330c      	adds	r3, #12
 8002a9c:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aa0:	e853 3f00 	ldrex	r3, [r3]
 8002aa4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002aac:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	330c      	adds	r3, #12
 8002ab4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ab6:	643a      	str	r2, [r7, #64]	; 0x40
 8002ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002abc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002abe:	e841 2300 	strex	r3, r2, [r1]
 8002ac2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d1e5      	bne.n	8002a96 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	3314      	adds	r3, #20
 8002ad0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ad2:	6a3b      	ldr	r3, [r7, #32]
 8002ad4:	e853 3f00 	ldrex	r3, [r3]
 8002ad8:	61fb      	str	r3, [r7, #28]
   return(result);
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	f023 0301 	bic.w	r3, r3, #1
 8002ae0:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	3314      	adds	r3, #20
 8002ae8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002aea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002aec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002af0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002af2:	e841 2300 	strex	r3, r2, [r1]
 8002af6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d1e5      	bne.n	8002aca <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d119      	bne.n	8002b3a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	330c      	adds	r3, #12
 8002b0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	e853 3f00 	ldrex	r3, [r3]
 8002b14:	60bb      	str	r3, [r7, #8]
   return(result);
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	f023 0310 	bic.w	r3, r3, #16
 8002b1c:	647b      	str	r3, [r7, #68]	; 0x44
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	330c      	adds	r3, #12
 8002b24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b26:	61ba      	str	r2, [r7, #24]
 8002b28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b2a:	6979      	ldr	r1, [r7, #20]
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	e841 2300 	strex	r3, r2, [r1]
 8002b32:	613b      	str	r3, [r7, #16]
   return(result);
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d1e5      	bne.n	8002b06 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2220      	movs	r2, #32
 8002b3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002b48:	bf00      	nop
 8002b4a:	3754      	adds	r7, #84	; 0x54
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bc80      	pop	{r7}
 8002b50:	4770      	bx	lr
	...

08002b54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	68da      	ldr	r2, [r3, #12]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	689a      	ldr	r2, [r3, #8]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	695b      	ldr	r3, [r3, #20]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002b8e:	f023 030c 	bic.w	r3, r3, #12
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	6812      	ldr	r2, [r2, #0]
 8002b96:	68b9      	ldr	r1, [r7, #8]
 8002b98:	430b      	orrs	r3, r1
 8002b9a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	695b      	ldr	r3, [r3, #20]
 8002ba2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	699a      	ldr	r2, [r3, #24]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a2c      	ldr	r2, [pc, #176]	; (8002c68 <UART_SetConfig+0x114>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d103      	bne.n	8002bc4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002bbc:	f7ff fd6a 	bl	8002694 <HAL_RCC_GetPCLK2Freq>
 8002bc0:	60f8      	str	r0, [r7, #12]
 8002bc2:	e002      	b.n	8002bca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002bc4:	f7ff fd52 	bl	800266c <HAL_RCC_GetPCLK1Freq>
 8002bc8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002bca:	68fa      	ldr	r2, [r7, #12]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	4413      	add	r3, r2
 8002bd2:	009a      	lsls	r2, r3, #2
 8002bd4:	441a      	add	r2, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be0:	4a22      	ldr	r2, [pc, #136]	; (8002c6c <UART_SetConfig+0x118>)
 8002be2:	fba2 2303 	umull	r2, r3, r2, r3
 8002be6:	095b      	lsrs	r3, r3, #5
 8002be8:	0119      	lsls	r1, r3, #4
 8002bea:	68fa      	ldr	r2, [r7, #12]
 8002bec:	4613      	mov	r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	4413      	add	r3, r2
 8002bf2:	009a      	lsls	r2, r3, #2
 8002bf4:	441a      	add	r2, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c00:	4b1a      	ldr	r3, [pc, #104]	; (8002c6c <UART_SetConfig+0x118>)
 8002c02:	fba3 0302 	umull	r0, r3, r3, r2
 8002c06:	095b      	lsrs	r3, r3, #5
 8002c08:	2064      	movs	r0, #100	; 0x64
 8002c0a:	fb00 f303 	mul.w	r3, r0, r3
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	011b      	lsls	r3, r3, #4
 8002c12:	3332      	adds	r3, #50	; 0x32
 8002c14:	4a15      	ldr	r2, [pc, #84]	; (8002c6c <UART_SetConfig+0x118>)
 8002c16:	fba2 2303 	umull	r2, r3, r2, r3
 8002c1a:	095b      	lsrs	r3, r3, #5
 8002c1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c20:	4419      	add	r1, r3
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	4613      	mov	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	4413      	add	r3, r2
 8002c2a:	009a      	lsls	r2, r3, #2
 8002c2c:	441a      	add	r2, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c38:	4b0c      	ldr	r3, [pc, #48]	; (8002c6c <UART_SetConfig+0x118>)
 8002c3a:	fba3 0302 	umull	r0, r3, r3, r2
 8002c3e:	095b      	lsrs	r3, r3, #5
 8002c40:	2064      	movs	r0, #100	; 0x64
 8002c42:	fb00 f303 	mul.w	r3, r0, r3
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	011b      	lsls	r3, r3, #4
 8002c4a:	3332      	adds	r3, #50	; 0x32
 8002c4c:	4a07      	ldr	r2, [pc, #28]	; (8002c6c <UART_SetConfig+0x118>)
 8002c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c52:	095b      	lsrs	r3, r3, #5
 8002c54:	f003 020f 	and.w	r2, r3, #15
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	440a      	add	r2, r1
 8002c5e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002c60:	bf00      	nop
 8002c62:	3710      	adds	r7, #16
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	40013800 	.word	0x40013800
 8002c6c:	51eb851f 	.word	0x51eb851f

08002c70 <__errno>:
 8002c70:	4b01      	ldr	r3, [pc, #4]	; (8002c78 <__errno+0x8>)
 8002c72:	6818      	ldr	r0, [r3, #0]
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	20000040 	.word	0x20000040

08002c7c <__libc_init_array>:
 8002c7c:	b570      	push	{r4, r5, r6, lr}
 8002c7e:	2600      	movs	r6, #0
 8002c80:	4d0c      	ldr	r5, [pc, #48]	; (8002cb4 <__libc_init_array+0x38>)
 8002c82:	4c0d      	ldr	r4, [pc, #52]	; (8002cb8 <__libc_init_array+0x3c>)
 8002c84:	1b64      	subs	r4, r4, r5
 8002c86:	10a4      	asrs	r4, r4, #2
 8002c88:	42a6      	cmp	r6, r4
 8002c8a:	d109      	bne.n	8002ca0 <__libc_init_array+0x24>
 8002c8c:	f000 fc9c 	bl	80035c8 <_init>
 8002c90:	2600      	movs	r6, #0
 8002c92:	4d0a      	ldr	r5, [pc, #40]	; (8002cbc <__libc_init_array+0x40>)
 8002c94:	4c0a      	ldr	r4, [pc, #40]	; (8002cc0 <__libc_init_array+0x44>)
 8002c96:	1b64      	subs	r4, r4, r5
 8002c98:	10a4      	asrs	r4, r4, #2
 8002c9a:	42a6      	cmp	r6, r4
 8002c9c:	d105      	bne.n	8002caa <__libc_init_array+0x2e>
 8002c9e:	bd70      	pop	{r4, r5, r6, pc}
 8002ca0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ca4:	4798      	blx	r3
 8002ca6:	3601      	adds	r6, #1
 8002ca8:	e7ee      	b.n	8002c88 <__libc_init_array+0xc>
 8002caa:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cae:	4798      	blx	r3
 8002cb0:	3601      	adds	r6, #1
 8002cb2:	e7f2      	b.n	8002c9a <__libc_init_array+0x1e>
 8002cb4:	08003670 	.word	0x08003670
 8002cb8:	08003670 	.word	0x08003670
 8002cbc:	08003670 	.word	0x08003670
 8002cc0:	08003674 	.word	0x08003674

08002cc4 <memset>:
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	4402      	add	r2, r0
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d100      	bne.n	8002cce <memset+0xa>
 8002ccc:	4770      	bx	lr
 8002cce:	f803 1b01 	strb.w	r1, [r3], #1
 8002cd2:	e7f9      	b.n	8002cc8 <memset+0x4>

08002cd4 <siprintf>:
 8002cd4:	b40e      	push	{r1, r2, r3}
 8002cd6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002cda:	b500      	push	{lr}
 8002cdc:	b09c      	sub	sp, #112	; 0x70
 8002cde:	ab1d      	add	r3, sp, #116	; 0x74
 8002ce0:	9002      	str	r0, [sp, #8]
 8002ce2:	9006      	str	r0, [sp, #24]
 8002ce4:	9107      	str	r1, [sp, #28]
 8002ce6:	9104      	str	r1, [sp, #16]
 8002ce8:	4808      	ldr	r0, [pc, #32]	; (8002d0c <siprintf+0x38>)
 8002cea:	4909      	ldr	r1, [pc, #36]	; (8002d10 <siprintf+0x3c>)
 8002cec:	f853 2b04 	ldr.w	r2, [r3], #4
 8002cf0:	9105      	str	r1, [sp, #20]
 8002cf2:	6800      	ldr	r0, [r0, #0]
 8002cf4:	a902      	add	r1, sp, #8
 8002cf6:	9301      	str	r3, [sp, #4]
 8002cf8:	f000 f868 	bl	8002dcc <_svfiprintf_r>
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	9b02      	ldr	r3, [sp, #8]
 8002d00:	701a      	strb	r2, [r3, #0]
 8002d02:	b01c      	add	sp, #112	; 0x70
 8002d04:	f85d eb04 	ldr.w	lr, [sp], #4
 8002d08:	b003      	add	sp, #12
 8002d0a:	4770      	bx	lr
 8002d0c:	20000040 	.word	0x20000040
 8002d10:	ffff0208 	.word	0xffff0208

08002d14 <__ssputs_r>:
 8002d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d18:	688e      	ldr	r6, [r1, #8]
 8002d1a:	4682      	mov	sl, r0
 8002d1c:	429e      	cmp	r6, r3
 8002d1e:	460c      	mov	r4, r1
 8002d20:	4690      	mov	r8, r2
 8002d22:	461f      	mov	r7, r3
 8002d24:	d838      	bhi.n	8002d98 <__ssputs_r+0x84>
 8002d26:	898a      	ldrh	r2, [r1, #12]
 8002d28:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002d2c:	d032      	beq.n	8002d94 <__ssputs_r+0x80>
 8002d2e:	6825      	ldr	r5, [r4, #0]
 8002d30:	6909      	ldr	r1, [r1, #16]
 8002d32:	3301      	adds	r3, #1
 8002d34:	eba5 0901 	sub.w	r9, r5, r1
 8002d38:	6965      	ldr	r5, [r4, #20]
 8002d3a:	444b      	add	r3, r9
 8002d3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002d40:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002d44:	106d      	asrs	r5, r5, #1
 8002d46:	429d      	cmp	r5, r3
 8002d48:	bf38      	it	cc
 8002d4a:	461d      	movcc	r5, r3
 8002d4c:	0553      	lsls	r3, r2, #21
 8002d4e:	d531      	bpl.n	8002db4 <__ssputs_r+0xa0>
 8002d50:	4629      	mov	r1, r5
 8002d52:	f000 fb6f 	bl	8003434 <_malloc_r>
 8002d56:	4606      	mov	r6, r0
 8002d58:	b950      	cbnz	r0, 8002d70 <__ssputs_r+0x5c>
 8002d5a:	230c      	movs	r3, #12
 8002d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d60:	f8ca 3000 	str.w	r3, [sl]
 8002d64:	89a3      	ldrh	r3, [r4, #12]
 8002d66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d6a:	81a3      	strh	r3, [r4, #12]
 8002d6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d70:	464a      	mov	r2, r9
 8002d72:	6921      	ldr	r1, [r4, #16]
 8002d74:	f000 face 	bl	8003314 <memcpy>
 8002d78:	89a3      	ldrh	r3, [r4, #12]
 8002d7a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002d7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d82:	81a3      	strh	r3, [r4, #12]
 8002d84:	6126      	str	r6, [r4, #16]
 8002d86:	444e      	add	r6, r9
 8002d88:	6026      	str	r6, [r4, #0]
 8002d8a:	463e      	mov	r6, r7
 8002d8c:	6165      	str	r5, [r4, #20]
 8002d8e:	eba5 0509 	sub.w	r5, r5, r9
 8002d92:	60a5      	str	r5, [r4, #8]
 8002d94:	42be      	cmp	r6, r7
 8002d96:	d900      	bls.n	8002d9a <__ssputs_r+0x86>
 8002d98:	463e      	mov	r6, r7
 8002d9a:	4632      	mov	r2, r6
 8002d9c:	4641      	mov	r1, r8
 8002d9e:	6820      	ldr	r0, [r4, #0]
 8002da0:	f000 fac6 	bl	8003330 <memmove>
 8002da4:	68a3      	ldr	r3, [r4, #8]
 8002da6:	2000      	movs	r0, #0
 8002da8:	1b9b      	subs	r3, r3, r6
 8002daa:	60a3      	str	r3, [r4, #8]
 8002dac:	6823      	ldr	r3, [r4, #0]
 8002dae:	4433      	add	r3, r6
 8002db0:	6023      	str	r3, [r4, #0]
 8002db2:	e7db      	b.n	8002d6c <__ssputs_r+0x58>
 8002db4:	462a      	mov	r2, r5
 8002db6:	f000 fbb1 	bl	800351c <_realloc_r>
 8002dba:	4606      	mov	r6, r0
 8002dbc:	2800      	cmp	r0, #0
 8002dbe:	d1e1      	bne.n	8002d84 <__ssputs_r+0x70>
 8002dc0:	4650      	mov	r0, sl
 8002dc2:	6921      	ldr	r1, [r4, #16]
 8002dc4:	f000 face 	bl	8003364 <_free_r>
 8002dc8:	e7c7      	b.n	8002d5a <__ssputs_r+0x46>
	...

08002dcc <_svfiprintf_r>:
 8002dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dd0:	4698      	mov	r8, r3
 8002dd2:	898b      	ldrh	r3, [r1, #12]
 8002dd4:	4607      	mov	r7, r0
 8002dd6:	061b      	lsls	r3, r3, #24
 8002dd8:	460d      	mov	r5, r1
 8002dda:	4614      	mov	r4, r2
 8002ddc:	b09d      	sub	sp, #116	; 0x74
 8002dde:	d50e      	bpl.n	8002dfe <_svfiprintf_r+0x32>
 8002de0:	690b      	ldr	r3, [r1, #16]
 8002de2:	b963      	cbnz	r3, 8002dfe <_svfiprintf_r+0x32>
 8002de4:	2140      	movs	r1, #64	; 0x40
 8002de6:	f000 fb25 	bl	8003434 <_malloc_r>
 8002dea:	6028      	str	r0, [r5, #0]
 8002dec:	6128      	str	r0, [r5, #16]
 8002dee:	b920      	cbnz	r0, 8002dfa <_svfiprintf_r+0x2e>
 8002df0:	230c      	movs	r3, #12
 8002df2:	603b      	str	r3, [r7, #0]
 8002df4:	f04f 30ff 	mov.w	r0, #4294967295
 8002df8:	e0d1      	b.n	8002f9e <_svfiprintf_r+0x1d2>
 8002dfa:	2340      	movs	r3, #64	; 0x40
 8002dfc:	616b      	str	r3, [r5, #20]
 8002dfe:	2300      	movs	r3, #0
 8002e00:	9309      	str	r3, [sp, #36]	; 0x24
 8002e02:	2320      	movs	r3, #32
 8002e04:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002e08:	2330      	movs	r3, #48	; 0x30
 8002e0a:	f04f 0901 	mov.w	r9, #1
 8002e0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002e12:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002fb8 <_svfiprintf_r+0x1ec>
 8002e16:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002e1a:	4623      	mov	r3, r4
 8002e1c:	469a      	mov	sl, r3
 8002e1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002e22:	b10a      	cbz	r2, 8002e28 <_svfiprintf_r+0x5c>
 8002e24:	2a25      	cmp	r2, #37	; 0x25
 8002e26:	d1f9      	bne.n	8002e1c <_svfiprintf_r+0x50>
 8002e28:	ebba 0b04 	subs.w	fp, sl, r4
 8002e2c:	d00b      	beq.n	8002e46 <_svfiprintf_r+0x7a>
 8002e2e:	465b      	mov	r3, fp
 8002e30:	4622      	mov	r2, r4
 8002e32:	4629      	mov	r1, r5
 8002e34:	4638      	mov	r0, r7
 8002e36:	f7ff ff6d 	bl	8002d14 <__ssputs_r>
 8002e3a:	3001      	adds	r0, #1
 8002e3c:	f000 80aa 	beq.w	8002f94 <_svfiprintf_r+0x1c8>
 8002e40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002e42:	445a      	add	r2, fp
 8002e44:	9209      	str	r2, [sp, #36]	; 0x24
 8002e46:	f89a 3000 	ldrb.w	r3, [sl]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	f000 80a2 	beq.w	8002f94 <_svfiprintf_r+0x1c8>
 8002e50:	2300      	movs	r3, #0
 8002e52:	f04f 32ff 	mov.w	r2, #4294967295
 8002e56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002e5a:	f10a 0a01 	add.w	sl, sl, #1
 8002e5e:	9304      	str	r3, [sp, #16]
 8002e60:	9307      	str	r3, [sp, #28]
 8002e62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002e66:	931a      	str	r3, [sp, #104]	; 0x68
 8002e68:	4654      	mov	r4, sl
 8002e6a:	2205      	movs	r2, #5
 8002e6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e70:	4851      	ldr	r0, [pc, #324]	; (8002fb8 <_svfiprintf_r+0x1ec>)
 8002e72:	f000 fa41 	bl	80032f8 <memchr>
 8002e76:	9a04      	ldr	r2, [sp, #16]
 8002e78:	b9d8      	cbnz	r0, 8002eb2 <_svfiprintf_r+0xe6>
 8002e7a:	06d0      	lsls	r0, r2, #27
 8002e7c:	bf44      	itt	mi
 8002e7e:	2320      	movmi	r3, #32
 8002e80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002e84:	0711      	lsls	r1, r2, #28
 8002e86:	bf44      	itt	mi
 8002e88:	232b      	movmi	r3, #43	; 0x2b
 8002e8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002e8e:	f89a 3000 	ldrb.w	r3, [sl]
 8002e92:	2b2a      	cmp	r3, #42	; 0x2a
 8002e94:	d015      	beq.n	8002ec2 <_svfiprintf_r+0xf6>
 8002e96:	4654      	mov	r4, sl
 8002e98:	2000      	movs	r0, #0
 8002e9a:	f04f 0c0a 	mov.w	ip, #10
 8002e9e:	9a07      	ldr	r2, [sp, #28]
 8002ea0:	4621      	mov	r1, r4
 8002ea2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002ea6:	3b30      	subs	r3, #48	; 0x30
 8002ea8:	2b09      	cmp	r3, #9
 8002eaa:	d94e      	bls.n	8002f4a <_svfiprintf_r+0x17e>
 8002eac:	b1b0      	cbz	r0, 8002edc <_svfiprintf_r+0x110>
 8002eae:	9207      	str	r2, [sp, #28]
 8002eb0:	e014      	b.n	8002edc <_svfiprintf_r+0x110>
 8002eb2:	eba0 0308 	sub.w	r3, r0, r8
 8002eb6:	fa09 f303 	lsl.w	r3, r9, r3
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	46a2      	mov	sl, r4
 8002ebe:	9304      	str	r3, [sp, #16]
 8002ec0:	e7d2      	b.n	8002e68 <_svfiprintf_r+0x9c>
 8002ec2:	9b03      	ldr	r3, [sp, #12]
 8002ec4:	1d19      	adds	r1, r3, #4
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	9103      	str	r1, [sp, #12]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	bfbb      	ittet	lt
 8002ece:	425b      	neglt	r3, r3
 8002ed0:	f042 0202 	orrlt.w	r2, r2, #2
 8002ed4:	9307      	strge	r3, [sp, #28]
 8002ed6:	9307      	strlt	r3, [sp, #28]
 8002ed8:	bfb8      	it	lt
 8002eda:	9204      	strlt	r2, [sp, #16]
 8002edc:	7823      	ldrb	r3, [r4, #0]
 8002ede:	2b2e      	cmp	r3, #46	; 0x2e
 8002ee0:	d10c      	bne.n	8002efc <_svfiprintf_r+0x130>
 8002ee2:	7863      	ldrb	r3, [r4, #1]
 8002ee4:	2b2a      	cmp	r3, #42	; 0x2a
 8002ee6:	d135      	bne.n	8002f54 <_svfiprintf_r+0x188>
 8002ee8:	9b03      	ldr	r3, [sp, #12]
 8002eea:	3402      	adds	r4, #2
 8002eec:	1d1a      	adds	r2, r3, #4
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	9203      	str	r2, [sp, #12]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	bfb8      	it	lt
 8002ef6:	f04f 33ff 	movlt.w	r3, #4294967295
 8002efa:	9305      	str	r3, [sp, #20]
 8002efc:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8002fbc <_svfiprintf_r+0x1f0>
 8002f00:	2203      	movs	r2, #3
 8002f02:	4650      	mov	r0, sl
 8002f04:	7821      	ldrb	r1, [r4, #0]
 8002f06:	f000 f9f7 	bl	80032f8 <memchr>
 8002f0a:	b140      	cbz	r0, 8002f1e <_svfiprintf_r+0x152>
 8002f0c:	2340      	movs	r3, #64	; 0x40
 8002f0e:	eba0 000a 	sub.w	r0, r0, sl
 8002f12:	fa03 f000 	lsl.w	r0, r3, r0
 8002f16:	9b04      	ldr	r3, [sp, #16]
 8002f18:	3401      	adds	r4, #1
 8002f1a:	4303      	orrs	r3, r0
 8002f1c:	9304      	str	r3, [sp, #16]
 8002f1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f22:	2206      	movs	r2, #6
 8002f24:	4826      	ldr	r0, [pc, #152]	; (8002fc0 <_svfiprintf_r+0x1f4>)
 8002f26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002f2a:	f000 f9e5 	bl	80032f8 <memchr>
 8002f2e:	2800      	cmp	r0, #0
 8002f30:	d038      	beq.n	8002fa4 <_svfiprintf_r+0x1d8>
 8002f32:	4b24      	ldr	r3, [pc, #144]	; (8002fc4 <_svfiprintf_r+0x1f8>)
 8002f34:	bb1b      	cbnz	r3, 8002f7e <_svfiprintf_r+0x1b2>
 8002f36:	9b03      	ldr	r3, [sp, #12]
 8002f38:	3307      	adds	r3, #7
 8002f3a:	f023 0307 	bic.w	r3, r3, #7
 8002f3e:	3308      	adds	r3, #8
 8002f40:	9303      	str	r3, [sp, #12]
 8002f42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f44:	4433      	add	r3, r6
 8002f46:	9309      	str	r3, [sp, #36]	; 0x24
 8002f48:	e767      	b.n	8002e1a <_svfiprintf_r+0x4e>
 8002f4a:	460c      	mov	r4, r1
 8002f4c:	2001      	movs	r0, #1
 8002f4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8002f52:	e7a5      	b.n	8002ea0 <_svfiprintf_r+0xd4>
 8002f54:	2300      	movs	r3, #0
 8002f56:	f04f 0c0a 	mov.w	ip, #10
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	3401      	adds	r4, #1
 8002f5e:	9305      	str	r3, [sp, #20]
 8002f60:	4620      	mov	r0, r4
 8002f62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002f66:	3a30      	subs	r2, #48	; 0x30
 8002f68:	2a09      	cmp	r2, #9
 8002f6a:	d903      	bls.n	8002f74 <_svfiprintf_r+0x1a8>
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d0c5      	beq.n	8002efc <_svfiprintf_r+0x130>
 8002f70:	9105      	str	r1, [sp, #20]
 8002f72:	e7c3      	b.n	8002efc <_svfiprintf_r+0x130>
 8002f74:	4604      	mov	r4, r0
 8002f76:	2301      	movs	r3, #1
 8002f78:	fb0c 2101 	mla	r1, ip, r1, r2
 8002f7c:	e7f0      	b.n	8002f60 <_svfiprintf_r+0x194>
 8002f7e:	ab03      	add	r3, sp, #12
 8002f80:	9300      	str	r3, [sp, #0]
 8002f82:	462a      	mov	r2, r5
 8002f84:	4638      	mov	r0, r7
 8002f86:	4b10      	ldr	r3, [pc, #64]	; (8002fc8 <_svfiprintf_r+0x1fc>)
 8002f88:	a904      	add	r1, sp, #16
 8002f8a:	f3af 8000 	nop.w
 8002f8e:	1c42      	adds	r2, r0, #1
 8002f90:	4606      	mov	r6, r0
 8002f92:	d1d6      	bne.n	8002f42 <_svfiprintf_r+0x176>
 8002f94:	89ab      	ldrh	r3, [r5, #12]
 8002f96:	065b      	lsls	r3, r3, #25
 8002f98:	f53f af2c 	bmi.w	8002df4 <_svfiprintf_r+0x28>
 8002f9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002f9e:	b01d      	add	sp, #116	; 0x74
 8002fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fa4:	ab03      	add	r3, sp, #12
 8002fa6:	9300      	str	r3, [sp, #0]
 8002fa8:	462a      	mov	r2, r5
 8002faa:	4638      	mov	r0, r7
 8002fac:	4b06      	ldr	r3, [pc, #24]	; (8002fc8 <_svfiprintf_r+0x1fc>)
 8002fae:	a904      	add	r1, sp, #16
 8002fb0:	f000 f87c 	bl	80030ac <_printf_i>
 8002fb4:	e7eb      	b.n	8002f8e <_svfiprintf_r+0x1c2>
 8002fb6:	bf00      	nop
 8002fb8:	0800363a 	.word	0x0800363a
 8002fbc:	08003640 	.word	0x08003640
 8002fc0:	08003644 	.word	0x08003644
 8002fc4:	00000000 	.word	0x00000000
 8002fc8:	08002d15 	.word	0x08002d15

08002fcc <_printf_common>:
 8002fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fd0:	4616      	mov	r6, r2
 8002fd2:	4699      	mov	r9, r3
 8002fd4:	688a      	ldr	r2, [r1, #8]
 8002fd6:	690b      	ldr	r3, [r1, #16]
 8002fd8:	4607      	mov	r7, r0
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	bfb8      	it	lt
 8002fde:	4613      	movlt	r3, r2
 8002fe0:	6033      	str	r3, [r6, #0]
 8002fe2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002fe6:	460c      	mov	r4, r1
 8002fe8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002fec:	b10a      	cbz	r2, 8002ff2 <_printf_common+0x26>
 8002fee:	3301      	adds	r3, #1
 8002ff0:	6033      	str	r3, [r6, #0]
 8002ff2:	6823      	ldr	r3, [r4, #0]
 8002ff4:	0699      	lsls	r1, r3, #26
 8002ff6:	bf42      	ittt	mi
 8002ff8:	6833      	ldrmi	r3, [r6, #0]
 8002ffa:	3302      	addmi	r3, #2
 8002ffc:	6033      	strmi	r3, [r6, #0]
 8002ffe:	6825      	ldr	r5, [r4, #0]
 8003000:	f015 0506 	ands.w	r5, r5, #6
 8003004:	d106      	bne.n	8003014 <_printf_common+0x48>
 8003006:	f104 0a19 	add.w	sl, r4, #25
 800300a:	68e3      	ldr	r3, [r4, #12]
 800300c:	6832      	ldr	r2, [r6, #0]
 800300e:	1a9b      	subs	r3, r3, r2
 8003010:	42ab      	cmp	r3, r5
 8003012:	dc28      	bgt.n	8003066 <_printf_common+0x9a>
 8003014:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003018:	1e13      	subs	r3, r2, #0
 800301a:	6822      	ldr	r2, [r4, #0]
 800301c:	bf18      	it	ne
 800301e:	2301      	movne	r3, #1
 8003020:	0692      	lsls	r2, r2, #26
 8003022:	d42d      	bmi.n	8003080 <_printf_common+0xb4>
 8003024:	4649      	mov	r1, r9
 8003026:	4638      	mov	r0, r7
 8003028:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800302c:	47c0      	blx	r8
 800302e:	3001      	adds	r0, #1
 8003030:	d020      	beq.n	8003074 <_printf_common+0xa8>
 8003032:	6823      	ldr	r3, [r4, #0]
 8003034:	68e5      	ldr	r5, [r4, #12]
 8003036:	f003 0306 	and.w	r3, r3, #6
 800303a:	2b04      	cmp	r3, #4
 800303c:	bf18      	it	ne
 800303e:	2500      	movne	r5, #0
 8003040:	6832      	ldr	r2, [r6, #0]
 8003042:	f04f 0600 	mov.w	r6, #0
 8003046:	68a3      	ldr	r3, [r4, #8]
 8003048:	bf08      	it	eq
 800304a:	1aad      	subeq	r5, r5, r2
 800304c:	6922      	ldr	r2, [r4, #16]
 800304e:	bf08      	it	eq
 8003050:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003054:	4293      	cmp	r3, r2
 8003056:	bfc4      	itt	gt
 8003058:	1a9b      	subgt	r3, r3, r2
 800305a:	18ed      	addgt	r5, r5, r3
 800305c:	341a      	adds	r4, #26
 800305e:	42b5      	cmp	r5, r6
 8003060:	d11a      	bne.n	8003098 <_printf_common+0xcc>
 8003062:	2000      	movs	r0, #0
 8003064:	e008      	b.n	8003078 <_printf_common+0xac>
 8003066:	2301      	movs	r3, #1
 8003068:	4652      	mov	r2, sl
 800306a:	4649      	mov	r1, r9
 800306c:	4638      	mov	r0, r7
 800306e:	47c0      	blx	r8
 8003070:	3001      	adds	r0, #1
 8003072:	d103      	bne.n	800307c <_printf_common+0xb0>
 8003074:	f04f 30ff 	mov.w	r0, #4294967295
 8003078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800307c:	3501      	adds	r5, #1
 800307e:	e7c4      	b.n	800300a <_printf_common+0x3e>
 8003080:	2030      	movs	r0, #48	; 0x30
 8003082:	18e1      	adds	r1, r4, r3
 8003084:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003088:	1c5a      	adds	r2, r3, #1
 800308a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800308e:	4422      	add	r2, r4
 8003090:	3302      	adds	r3, #2
 8003092:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003096:	e7c5      	b.n	8003024 <_printf_common+0x58>
 8003098:	2301      	movs	r3, #1
 800309a:	4622      	mov	r2, r4
 800309c:	4649      	mov	r1, r9
 800309e:	4638      	mov	r0, r7
 80030a0:	47c0      	blx	r8
 80030a2:	3001      	adds	r0, #1
 80030a4:	d0e6      	beq.n	8003074 <_printf_common+0xa8>
 80030a6:	3601      	adds	r6, #1
 80030a8:	e7d9      	b.n	800305e <_printf_common+0x92>
	...

080030ac <_printf_i>:
 80030ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80030b0:	7e0f      	ldrb	r7, [r1, #24]
 80030b2:	4691      	mov	r9, r2
 80030b4:	2f78      	cmp	r7, #120	; 0x78
 80030b6:	4680      	mov	r8, r0
 80030b8:	460c      	mov	r4, r1
 80030ba:	469a      	mov	sl, r3
 80030bc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80030be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80030c2:	d807      	bhi.n	80030d4 <_printf_i+0x28>
 80030c4:	2f62      	cmp	r7, #98	; 0x62
 80030c6:	d80a      	bhi.n	80030de <_printf_i+0x32>
 80030c8:	2f00      	cmp	r7, #0
 80030ca:	f000 80d9 	beq.w	8003280 <_printf_i+0x1d4>
 80030ce:	2f58      	cmp	r7, #88	; 0x58
 80030d0:	f000 80a4 	beq.w	800321c <_printf_i+0x170>
 80030d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80030d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80030dc:	e03a      	b.n	8003154 <_printf_i+0xa8>
 80030de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80030e2:	2b15      	cmp	r3, #21
 80030e4:	d8f6      	bhi.n	80030d4 <_printf_i+0x28>
 80030e6:	a101      	add	r1, pc, #4	; (adr r1, 80030ec <_printf_i+0x40>)
 80030e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80030ec:	08003145 	.word	0x08003145
 80030f0:	08003159 	.word	0x08003159
 80030f4:	080030d5 	.word	0x080030d5
 80030f8:	080030d5 	.word	0x080030d5
 80030fc:	080030d5 	.word	0x080030d5
 8003100:	080030d5 	.word	0x080030d5
 8003104:	08003159 	.word	0x08003159
 8003108:	080030d5 	.word	0x080030d5
 800310c:	080030d5 	.word	0x080030d5
 8003110:	080030d5 	.word	0x080030d5
 8003114:	080030d5 	.word	0x080030d5
 8003118:	08003267 	.word	0x08003267
 800311c:	08003189 	.word	0x08003189
 8003120:	08003249 	.word	0x08003249
 8003124:	080030d5 	.word	0x080030d5
 8003128:	080030d5 	.word	0x080030d5
 800312c:	08003289 	.word	0x08003289
 8003130:	080030d5 	.word	0x080030d5
 8003134:	08003189 	.word	0x08003189
 8003138:	080030d5 	.word	0x080030d5
 800313c:	080030d5 	.word	0x080030d5
 8003140:	08003251 	.word	0x08003251
 8003144:	682b      	ldr	r3, [r5, #0]
 8003146:	1d1a      	adds	r2, r3, #4
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	602a      	str	r2, [r5, #0]
 800314c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003150:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003154:	2301      	movs	r3, #1
 8003156:	e0a4      	b.n	80032a2 <_printf_i+0x1f6>
 8003158:	6820      	ldr	r0, [r4, #0]
 800315a:	6829      	ldr	r1, [r5, #0]
 800315c:	0606      	lsls	r6, r0, #24
 800315e:	f101 0304 	add.w	r3, r1, #4
 8003162:	d50a      	bpl.n	800317a <_printf_i+0xce>
 8003164:	680e      	ldr	r6, [r1, #0]
 8003166:	602b      	str	r3, [r5, #0]
 8003168:	2e00      	cmp	r6, #0
 800316a:	da03      	bge.n	8003174 <_printf_i+0xc8>
 800316c:	232d      	movs	r3, #45	; 0x2d
 800316e:	4276      	negs	r6, r6
 8003170:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003174:	230a      	movs	r3, #10
 8003176:	485e      	ldr	r0, [pc, #376]	; (80032f0 <_printf_i+0x244>)
 8003178:	e019      	b.n	80031ae <_printf_i+0x102>
 800317a:	680e      	ldr	r6, [r1, #0]
 800317c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003180:	602b      	str	r3, [r5, #0]
 8003182:	bf18      	it	ne
 8003184:	b236      	sxthne	r6, r6
 8003186:	e7ef      	b.n	8003168 <_printf_i+0xbc>
 8003188:	682b      	ldr	r3, [r5, #0]
 800318a:	6820      	ldr	r0, [r4, #0]
 800318c:	1d19      	adds	r1, r3, #4
 800318e:	6029      	str	r1, [r5, #0]
 8003190:	0601      	lsls	r1, r0, #24
 8003192:	d501      	bpl.n	8003198 <_printf_i+0xec>
 8003194:	681e      	ldr	r6, [r3, #0]
 8003196:	e002      	b.n	800319e <_printf_i+0xf2>
 8003198:	0646      	lsls	r6, r0, #25
 800319a:	d5fb      	bpl.n	8003194 <_printf_i+0xe8>
 800319c:	881e      	ldrh	r6, [r3, #0]
 800319e:	2f6f      	cmp	r7, #111	; 0x6f
 80031a0:	bf0c      	ite	eq
 80031a2:	2308      	moveq	r3, #8
 80031a4:	230a      	movne	r3, #10
 80031a6:	4852      	ldr	r0, [pc, #328]	; (80032f0 <_printf_i+0x244>)
 80031a8:	2100      	movs	r1, #0
 80031aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80031ae:	6865      	ldr	r5, [r4, #4]
 80031b0:	2d00      	cmp	r5, #0
 80031b2:	bfa8      	it	ge
 80031b4:	6821      	ldrge	r1, [r4, #0]
 80031b6:	60a5      	str	r5, [r4, #8]
 80031b8:	bfa4      	itt	ge
 80031ba:	f021 0104 	bicge.w	r1, r1, #4
 80031be:	6021      	strge	r1, [r4, #0]
 80031c0:	b90e      	cbnz	r6, 80031c6 <_printf_i+0x11a>
 80031c2:	2d00      	cmp	r5, #0
 80031c4:	d04d      	beq.n	8003262 <_printf_i+0x1b6>
 80031c6:	4615      	mov	r5, r2
 80031c8:	fbb6 f1f3 	udiv	r1, r6, r3
 80031cc:	fb03 6711 	mls	r7, r3, r1, r6
 80031d0:	5dc7      	ldrb	r7, [r0, r7]
 80031d2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80031d6:	4637      	mov	r7, r6
 80031d8:	42bb      	cmp	r3, r7
 80031da:	460e      	mov	r6, r1
 80031dc:	d9f4      	bls.n	80031c8 <_printf_i+0x11c>
 80031de:	2b08      	cmp	r3, #8
 80031e0:	d10b      	bne.n	80031fa <_printf_i+0x14e>
 80031e2:	6823      	ldr	r3, [r4, #0]
 80031e4:	07de      	lsls	r6, r3, #31
 80031e6:	d508      	bpl.n	80031fa <_printf_i+0x14e>
 80031e8:	6923      	ldr	r3, [r4, #16]
 80031ea:	6861      	ldr	r1, [r4, #4]
 80031ec:	4299      	cmp	r1, r3
 80031ee:	bfde      	ittt	le
 80031f0:	2330      	movle	r3, #48	; 0x30
 80031f2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80031f6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80031fa:	1b52      	subs	r2, r2, r5
 80031fc:	6122      	str	r2, [r4, #16]
 80031fe:	464b      	mov	r3, r9
 8003200:	4621      	mov	r1, r4
 8003202:	4640      	mov	r0, r8
 8003204:	f8cd a000 	str.w	sl, [sp]
 8003208:	aa03      	add	r2, sp, #12
 800320a:	f7ff fedf 	bl	8002fcc <_printf_common>
 800320e:	3001      	adds	r0, #1
 8003210:	d14c      	bne.n	80032ac <_printf_i+0x200>
 8003212:	f04f 30ff 	mov.w	r0, #4294967295
 8003216:	b004      	add	sp, #16
 8003218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800321c:	4834      	ldr	r0, [pc, #208]	; (80032f0 <_printf_i+0x244>)
 800321e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003222:	6829      	ldr	r1, [r5, #0]
 8003224:	6823      	ldr	r3, [r4, #0]
 8003226:	f851 6b04 	ldr.w	r6, [r1], #4
 800322a:	6029      	str	r1, [r5, #0]
 800322c:	061d      	lsls	r5, r3, #24
 800322e:	d514      	bpl.n	800325a <_printf_i+0x1ae>
 8003230:	07df      	lsls	r7, r3, #31
 8003232:	bf44      	itt	mi
 8003234:	f043 0320 	orrmi.w	r3, r3, #32
 8003238:	6023      	strmi	r3, [r4, #0]
 800323a:	b91e      	cbnz	r6, 8003244 <_printf_i+0x198>
 800323c:	6823      	ldr	r3, [r4, #0]
 800323e:	f023 0320 	bic.w	r3, r3, #32
 8003242:	6023      	str	r3, [r4, #0]
 8003244:	2310      	movs	r3, #16
 8003246:	e7af      	b.n	80031a8 <_printf_i+0xfc>
 8003248:	6823      	ldr	r3, [r4, #0]
 800324a:	f043 0320 	orr.w	r3, r3, #32
 800324e:	6023      	str	r3, [r4, #0]
 8003250:	2378      	movs	r3, #120	; 0x78
 8003252:	4828      	ldr	r0, [pc, #160]	; (80032f4 <_printf_i+0x248>)
 8003254:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003258:	e7e3      	b.n	8003222 <_printf_i+0x176>
 800325a:	0659      	lsls	r1, r3, #25
 800325c:	bf48      	it	mi
 800325e:	b2b6      	uxthmi	r6, r6
 8003260:	e7e6      	b.n	8003230 <_printf_i+0x184>
 8003262:	4615      	mov	r5, r2
 8003264:	e7bb      	b.n	80031de <_printf_i+0x132>
 8003266:	682b      	ldr	r3, [r5, #0]
 8003268:	6826      	ldr	r6, [r4, #0]
 800326a:	1d18      	adds	r0, r3, #4
 800326c:	6961      	ldr	r1, [r4, #20]
 800326e:	6028      	str	r0, [r5, #0]
 8003270:	0635      	lsls	r5, r6, #24
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	d501      	bpl.n	800327a <_printf_i+0x1ce>
 8003276:	6019      	str	r1, [r3, #0]
 8003278:	e002      	b.n	8003280 <_printf_i+0x1d4>
 800327a:	0670      	lsls	r0, r6, #25
 800327c:	d5fb      	bpl.n	8003276 <_printf_i+0x1ca>
 800327e:	8019      	strh	r1, [r3, #0]
 8003280:	2300      	movs	r3, #0
 8003282:	4615      	mov	r5, r2
 8003284:	6123      	str	r3, [r4, #16]
 8003286:	e7ba      	b.n	80031fe <_printf_i+0x152>
 8003288:	682b      	ldr	r3, [r5, #0]
 800328a:	2100      	movs	r1, #0
 800328c:	1d1a      	adds	r2, r3, #4
 800328e:	602a      	str	r2, [r5, #0]
 8003290:	681d      	ldr	r5, [r3, #0]
 8003292:	6862      	ldr	r2, [r4, #4]
 8003294:	4628      	mov	r0, r5
 8003296:	f000 f82f 	bl	80032f8 <memchr>
 800329a:	b108      	cbz	r0, 80032a0 <_printf_i+0x1f4>
 800329c:	1b40      	subs	r0, r0, r5
 800329e:	6060      	str	r0, [r4, #4]
 80032a0:	6863      	ldr	r3, [r4, #4]
 80032a2:	6123      	str	r3, [r4, #16]
 80032a4:	2300      	movs	r3, #0
 80032a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80032aa:	e7a8      	b.n	80031fe <_printf_i+0x152>
 80032ac:	462a      	mov	r2, r5
 80032ae:	4649      	mov	r1, r9
 80032b0:	4640      	mov	r0, r8
 80032b2:	6923      	ldr	r3, [r4, #16]
 80032b4:	47d0      	blx	sl
 80032b6:	3001      	adds	r0, #1
 80032b8:	d0ab      	beq.n	8003212 <_printf_i+0x166>
 80032ba:	6823      	ldr	r3, [r4, #0]
 80032bc:	079b      	lsls	r3, r3, #30
 80032be:	d413      	bmi.n	80032e8 <_printf_i+0x23c>
 80032c0:	68e0      	ldr	r0, [r4, #12]
 80032c2:	9b03      	ldr	r3, [sp, #12]
 80032c4:	4298      	cmp	r0, r3
 80032c6:	bfb8      	it	lt
 80032c8:	4618      	movlt	r0, r3
 80032ca:	e7a4      	b.n	8003216 <_printf_i+0x16a>
 80032cc:	2301      	movs	r3, #1
 80032ce:	4632      	mov	r2, r6
 80032d0:	4649      	mov	r1, r9
 80032d2:	4640      	mov	r0, r8
 80032d4:	47d0      	blx	sl
 80032d6:	3001      	adds	r0, #1
 80032d8:	d09b      	beq.n	8003212 <_printf_i+0x166>
 80032da:	3501      	adds	r5, #1
 80032dc:	68e3      	ldr	r3, [r4, #12]
 80032de:	9903      	ldr	r1, [sp, #12]
 80032e0:	1a5b      	subs	r3, r3, r1
 80032e2:	42ab      	cmp	r3, r5
 80032e4:	dcf2      	bgt.n	80032cc <_printf_i+0x220>
 80032e6:	e7eb      	b.n	80032c0 <_printf_i+0x214>
 80032e8:	2500      	movs	r5, #0
 80032ea:	f104 0619 	add.w	r6, r4, #25
 80032ee:	e7f5      	b.n	80032dc <_printf_i+0x230>
 80032f0:	0800364b 	.word	0x0800364b
 80032f4:	0800365c 	.word	0x0800365c

080032f8 <memchr>:
 80032f8:	4603      	mov	r3, r0
 80032fa:	b510      	push	{r4, lr}
 80032fc:	b2c9      	uxtb	r1, r1
 80032fe:	4402      	add	r2, r0
 8003300:	4293      	cmp	r3, r2
 8003302:	4618      	mov	r0, r3
 8003304:	d101      	bne.n	800330a <memchr+0x12>
 8003306:	2000      	movs	r0, #0
 8003308:	e003      	b.n	8003312 <memchr+0x1a>
 800330a:	7804      	ldrb	r4, [r0, #0]
 800330c:	3301      	adds	r3, #1
 800330e:	428c      	cmp	r4, r1
 8003310:	d1f6      	bne.n	8003300 <memchr+0x8>
 8003312:	bd10      	pop	{r4, pc}

08003314 <memcpy>:
 8003314:	440a      	add	r2, r1
 8003316:	4291      	cmp	r1, r2
 8003318:	f100 33ff 	add.w	r3, r0, #4294967295
 800331c:	d100      	bne.n	8003320 <memcpy+0xc>
 800331e:	4770      	bx	lr
 8003320:	b510      	push	{r4, lr}
 8003322:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003326:	4291      	cmp	r1, r2
 8003328:	f803 4f01 	strb.w	r4, [r3, #1]!
 800332c:	d1f9      	bne.n	8003322 <memcpy+0xe>
 800332e:	bd10      	pop	{r4, pc}

08003330 <memmove>:
 8003330:	4288      	cmp	r0, r1
 8003332:	b510      	push	{r4, lr}
 8003334:	eb01 0402 	add.w	r4, r1, r2
 8003338:	d902      	bls.n	8003340 <memmove+0x10>
 800333a:	4284      	cmp	r4, r0
 800333c:	4623      	mov	r3, r4
 800333e:	d807      	bhi.n	8003350 <memmove+0x20>
 8003340:	1e43      	subs	r3, r0, #1
 8003342:	42a1      	cmp	r1, r4
 8003344:	d008      	beq.n	8003358 <memmove+0x28>
 8003346:	f811 2b01 	ldrb.w	r2, [r1], #1
 800334a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800334e:	e7f8      	b.n	8003342 <memmove+0x12>
 8003350:	4601      	mov	r1, r0
 8003352:	4402      	add	r2, r0
 8003354:	428a      	cmp	r2, r1
 8003356:	d100      	bne.n	800335a <memmove+0x2a>
 8003358:	bd10      	pop	{r4, pc}
 800335a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800335e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003362:	e7f7      	b.n	8003354 <memmove+0x24>

08003364 <_free_r>:
 8003364:	b538      	push	{r3, r4, r5, lr}
 8003366:	4605      	mov	r5, r0
 8003368:	2900      	cmp	r1, #0
 800336a:	d040      	beq.n	80033ee <_free_r+0x8a>
 800336c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003370:	1f0c      	subs	r4, r1, #4
 8003372:	2b00      	cmp	r3, #0
 8003374:	bfb8      	it	lt
 8003376:	18e4      	addlt	r4, r4, r3
 8003378:	f000 f910 	bl	800359c <__malloc_lock>
 800337c:	4a1c      	ldr	r2, [pc, #112]	; (80033f0 <_free_r+0x8c>)
 800337e:	6813      	ldr	r3, [r2, #0]
 8003380:	b933      	cbnz	r3, 8003390 <_free_r+0x2c>
 8003382:	6063      	str	r3, [r4, #4]
 8003384:	6014      	str	r4, [r2, #0]
 8003386:	4628      	mov	r0, r5
 8003388:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800338c:	f000 b90c 	b.w	80035a8 <__malloc_unlock>
 8003390:	42a3      	cmp	r3, r4
 8003392:	d908      	bls.n	80033a6 <_free_r+0x42>
 8003394:	6820      	ldr	r0, [r4, #0]
 8003396:	1821      	adds	r1, r4, r0
 8003398:	428b      	cmp	r3, r1
 800339a:	bf01      	itttt	eq
 800339c:	6819      	ldreq	r1, [r3, #0]
 800339e:	685b      	ldreq	r3, [r3, #4]
 80033a0:	1809      	addeq	r1, r1, r0
 80033a2:	6021      	streq	r1, [r4, #0]
 80033a4:	e7ed      	b.n	8003382 <_free_r+0x1e>
 80033a6:	461a      	mov	r2, r3
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	b10b      	cbz	r3, 80033b0 <_free_r+0x4c>
 80033ac:	42a3      	cmp	r3, r4
 80033ae:	d9fa      	bls.n	80033a6 <_free_r+0x42>
 80033b0:	6811      	ldr	r1, [r2, #0]
 80033b2:	1850      	adds	r0, r2, r1
 80033b4:	42a0      	cmp	r0, r4
 80033b6:	d10b      	bne.n	80033d0 <_free_r+0x6c>
 80033b8:	6820      	ldr	r0, [r4, #0]
 80033ba:	4401      	add	r1, r0
 80033bc:	1850      	adds	r0, r2, r1
 80033be:	4283      	cmp	r3, r0
 80033c0:	6011      	str	r1, [r2, #0]
 80033c2:	d1e0      	bne.n	8003386 <_free_r+0x22>
 80033c4:	6818      	ldr	r0, [r3, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	4401      	add	r1, r0
 80033ca:	6011      	str	r1, [r2, #0]
 80033cc:	6053      	str	r3, [r2, #4]
 80033ce:	e7da      	b.n	8003386 <_free_r+0x22>
 80033d0:	d902      	bls.n	80033d8 <_free_r+0x74>
 80033d2:	230c      	movs	r3, #12
 80033d4:	602b      	str	r3, [r5, #0]
 80033d6:	e7d6      	b.n	8003386 <_free_r+0x22>
 80033d8:	6820      	ldr	r0, [r4, #0]
 80033da:	1821      	adds	r1, r4, r0
 80033dc:	428b      	cmp	r3, r1
 80033de:	bf01      	itttt	eq
 80033e0:	6819      	ldreq	r1, [r3, #0]
 80033e2:	685b      	ldreq	r3, [r3, #4]
 80033e4:	1809      	addeq	r1, r1, r0
 80033e6:	6021      	streq	r1, [r4, #0]
 80033e8:	6063      	str	r3, [r4, #4]
 80033ea:	6054      	str	r4, [r2, #4]
 80033ec:	e7cb      	b.n	8003386 <_free_r+0x22>
 80033ee:	bd38      	pop	{r3, r4, r5, pc}
 80033f0:	2000019c 	.word	0x2000019c

080033f4 <sbrk_aligned>:
 80033f4:	b570      	push	{r4, r5, r6, lr}
 80033f6:	4e0e      	ldr	r6, [pc, #56]	; (8003430 <sbrk_aligned+0x3c>)
 80033f8:	460c      	mov	r4, r1
 80033fa:	6831      	ldr	r1, [r6, #0]
 80033fc:	4605      	mov	r5, r0
 80033fe:	b911      	cbnz	r1, 8003406 <sbrk_aligned+0x12>
 8003400:	f000 f8bc 	bl	800357c <_sbrk_r>
 8003404:	6030      	str	r0, [r6, #0]
 8003406:	4621      	mov	r1, r4
 8003408:	4628      	mov	r0, r5
 800340a:	f000 f8b7 	bl	800357c <_sbrk_r>
 800340e:	1c43      	adds	r3, r0, #1
 8003410:	d00a      	beq.n	8003428 <sbrk_aligned+0x34>
 8003412:	1cc4      	adds	r4, r0, #3
 8003414:	f024 0403 	bic.w	r4, r4, #3
 8003418:	42a0      	cmp	r0, r4
 800341a:	d007      	beq.n	800342c <sbrk_aligned+0x38>
 800341c:	1a21      	subs	r1, r4, r0
 800341e:	4628      	mov	r0, r5
 8003420:	f000 f8ac 	bl	800357c <_sbrk_r>
 8003424:	3001      	adds	r0, #1
 8003426:	d101      	bne.n	800342c <sbrk_aligned+0x38>
 8003428:	f04f 34ff 	mov.w	r4, #4294967295
 800342c:	4620      	mov	r0, r4
 800342e:	bd70      	pop	{r4, r5, r6, pc}
 8003430:	200001a0 	.word	0x200001a0

08003434 <_malloc_r>:
 8003434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003438:	1ccd      	adds	r5, r1, #3
 800343a:	f025 0503 	bic.w	r5, r5, #3
 800343e:	3508      	adds	r5, #8
 8003440:	2d0c      	cmp	r5, #12
 8003442:	bf38      	it	cc
 8003444:	250c      	movcc	r5, #12
 8003446:	2d00      	cmp	r5, #0
 8003448:	4607      	mov	r7, r0
 800344a:	db01      	blt.n	8003450 <_malloc_r+0x1c>
 800344c:	42a9      	cmp	r1, r5
 800344e:	d905      	bls.n	800345c <_malloc_r+0x28>
 8003450:	230c      	movs	r3, #12
 8003452:	2600      	movs	r6, #0
 8003454:	603b      	str	r3, [r7, #0]
 8003456:	4630      	mov	r0, r6
 8003458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800345c:	4e2e      	ldr	r6, [pc, #184]	; (8003518 <_malloc_r+0xe4>)
 800345e:	f000 f89d 	bl	800359c <__malloc_lock>
 8003462:	6833      	ldr	r3, [r6, #0]
 8003464:	461c      	mov	r4, r3
 8003466:	bb34      	cbnz	r4, 80034b6 <_malloc_r+0x82>
 8003468:	4629      	mov	r1, r5
 800346a:	4638      	mov	r0, r7
 800346c:	f7ff ffc2 	bl	80033f4 <sbrk_aligned>
 8003470:	1c43      	adds	r3, r0, #1
 8003472:	4604      	mov	r4, r0
 8003474:	d14d      	bne.n	8003512 <_malloc_r+0xde>
 8003476:	6834      	ldr	r4, [r6, #0]
 8003478:	4626      	mov	r6, r4
 800347a:	2e00      	cmp	r6, #0
 800347c:	d140      	bne.n	8003500 <_malloc_r+0xcc>
 800347e:	6823      	ldr	r3, [r4, #0]
 8003480:	4631      	mov	r1, r6
 8003482:	4638      	mov	r0, r7
 8003484:	eb04 0803 	add.w	r8, r4, r3
 8003488:	f000 f878 	bl	800357c <_sbrk_r>
 800348c:	4580      	cmp	r8, r0
 800348e:	d13a      	bne.n	8003506 <_malloc_r+0xd2>
 8003490:	6821      	ldr	r1, [r4, #0]
 8003492:	3503      	adds	r5, #3
 8003494:	1a6d      	subs	r5, r5, r1
 8003496:	f025 0503 	bic.w	r5, r5, #3
 800349a:	3508      	adds	r5, #8
 800349c:	2d0c      	cmp	r5, #12
 800349e:	bf38      	it	cc
 80034a0:	250c      	movcc	r5, #12
 80034a2:	4638      	mov	r0, r7
 80034a4:	4629      	mov	r1, r5
 80034a6:	f7ff ffa5 	bl	80033f4 <sbrk_aligned>
 80034aa:	3001      	adds	r0, #1
 80034ac:	d02b      	beq.n	8003506 <_malloc_r+0xd2>
 80034ae:	6823      	ldr	r3, [r4, #0]
 80034b0:	442b      	add	r3, r5
 80034b2:	6023      	str	r3, [r4, #0]
 80034b4:	e00e      	b.n	80034d4 <_malloc_r+0xa0>
 80034b6:	6822      	ldr	r2, [r4, #0]
 80034b8:	1b52      	subs	r2, r2, r5
 80034ba:	d41e      	bmi.n	80034fa <_malloc_r+0xc6>
 80034bc:	2a0b      	cmp	r2, #11
 80034be:	d916      	bls.n	80034ee <_malloc_r+0xba>
 80034c0:	1961      	adds	r1, r4, r5
 80034c2:	42a3      	cmp	r3, r4
 80034c4:	6025      	str	r5, [r4, #0]
 80034c6:	bf18      	it	ne
 80034c8:	6059      	strne	r1, [r3, #4]
 80034ca:	6863      	ldr	r3, [r4, #4]
 80034cc:	bf08      	it	eq
 80034ce:	6031      	streq	r1, [r6, #0]
 80034d0:	5162      	str	r2, [r4, r5]
 80034d2:	604b      	str	r3, [r1, #4]
 80034d4:	4638      	mov	r0, r7
 80034d6:	f104 060b 	add.w	r6, r4, #11
 80034da:	f000 f865 	bl	80035a8 <__malloc_unlock>
 80034de:	f026 0607 	bic.w	r6, r6, #7
 80034e2:	1d23      	adds	r3, r4, #4
 80034e4:	1af2      	subs	r2, r6, r3
 80034e6:	d0b6      	beq.n	8003456 <_malloc_r+0x22>
 80034e8:	1b9b      	subs	r3, r3, r6
 80034ea:	50a3      	str	r3, [r4, r2]
 80034ec:	e7b3      	b.n	8003456 <_malloc_r+0x22>
 80034ee:	6862      	ldr	r2, [r4, #4]
 80034f0:	42a3      	cmp	r3, r4
 80034f2:	bf0c      	ite	eq
 80034f4:	6032      	streq	r2, [r6, #0]
 80034f6:	605a      	strne	r2, [r3, #4]
 80034f8:	e7ec      	b.n	80034d4 <_malloc_r+0xa0>
 80034fa:	4623      	mov	r3, r4
 80034fc:	6864      	ldr	r4, [r4, #4]
 80034fe:	e7b2      	b.n	8003466 <_malloc_r+0x32>
 8003500:	4634      	mov	r4, r6
 8003502:	6876      	ldr	r6, [r6, #4]
 8003504:	e7b9      	b.n	800347a <_malloc_r+0x46>
 8003506:	230c      	movs	r3, #12
 8003508:	4638      	mov	r0, r7
 800350a:	603b      	str	r3, [r7, #0]
 800350c:	f000 f84c 	bl	80035a8 <__malloc_unlock>
 8003510:	e7a1      	b.n	8003456 <_malloc_r+0x22>
 8003512:	6025      	str	r5, [r4, #0]
 8003514:	e7de      	b.n	80034d4 <_malloc_r+0xa0>
 8003516:	bf00      	nop
 8003518:	2000019c 	.word	0x2000019c

0800351c <_realloc_r>:
 800351c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003520:	4680      	mov	r8, r0
 8003522:	4614      	mov	r4, r2
 8003524:	460e      	mov	r6, r1
 8003526:	b921      	cbnz	r1, 8003532 <_realloc_r+0x16>
 8003528:	4611      	mov	r1, r2
 800352a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800352e:	f7ff bf81 	b.w	8003434 <_malloc_r>
 8003532:	b92a      	cbnz	r2, 8003540 <_realloc_r+0x24>
 8003534:	f7ff ff16 	bl	8003364 <_free_r>
 8003538:	4625      	mov	r5, r4
 800353a:	4628      	mov	r0, r5
 800353c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003540:	f000 f838 	bl	80035b4 <_malloc_usable_size_r>
 8003544:	4284      	cmp	r4, r0
 8003546:	4607      	mov	r7, r0
 8003548:	d802      	bhi.n	8003550 <_realloc_r+0x34>
 800354a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800354e:	d812      	bhi.n	8003576 <_realloc_r+0x5a>
 8003550:	4621      	mov	r1, r4
 8003552:	4640      	mov	r0, r8
 8003554:	f7ff ff6e 	bl	8003434 <_malloc_r>
 8003558:	4605      	mov	r5, r0
 800355a:	2800      	cmp	r0, #0
 800355c:	d0ed      	beq.n	800353a <_realloc_r+0x1e>
 800355e:	42bc      	cmp	r4, r7
 8003560:	4622      	mov	r2, r4
 8003562:	4631      	mov	r1, r6
 8003564:	bf28      	it	cs
 8003566:	463a      	movcs	r2, r7
 8003568:	f7ff fed4 	bl	8003314 <memcpy>
 800356c:	4631      	mov	r1, r6
 800356e:	4640      	mov	r0, r8
 8003570:	f7ff fef8 	bl	8003364 <_free_r>
 8003574:	e7e1      	b.n	800353a <_realloc_r+0x1e>
 8003576:	4635      	mov	r5, r6
 8003578:	e7df      	b.n	800353a <_realloc_r+0x1e>
	...

0800357c <_sbrk_r>:
 800357c:	b538      	push	{r3, r4, r5, lr}
 800357e:	2300      	movs	r3, #0
 8003580:	4d05      	ldr	r5, [pc, #20]	; (8003598 <_sbrk_r+0x1c>)
 8003582:	4604      	mov	r4, r0
 8003584:	4608      	mov	r0, r1
 8003586:	602b      	str	r3, [r5, #0]
 8003588:	f7fd f82e 	bl	80005e8 <_sbrk>
 800358c:	1c43      	adds	r3, r0, #1
 800358e:	d102      	bne.n	8003596 <_sbrk_r+0x1a>
 8003590:	682b      	ldr	r3, [r5, #0]
 8003592:	b103      	cbz	r3, 8003596 <_sbrk_r+0x1a>
 8003594:	6023      	str	r3, [r4, #0]
 8003596:	bd38      	pop	{r3, r4, r5, pc}
 8003598:	200001a4 	.word	0x200001a4

0800359c <__malloc_lock>:
 800359c:	4801      	ldr	r0, [pc, #4]	; (80035a4 <__malloc_lock+0x8>)
 800359e:	f000 b811 	b.w	80035c4 <__retarget_lock_acquire_recursive>
 80035a2:	bf00      	nop
 80035a4:	200001a8 	.word	0x200001a8

080035a8 <__malloc_unlock>:
 80035a8:	4801      	ldr	r0, [pc, #4]	; (80035b0 <__malloc_unlock+0x8>)
 80035aa:	f000 b80c 	b.w	80035c6 <__retarget_lock_release_recursive>
 80035ae:	bf00      	nop
 80035b0:	200001a8 	.word	0x200001a8

080035b4 <_malloc_usable_size_r>:
 80035b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80035b8:	1f18      	subs	r0, r3, #4
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	bfbc      	itt	lt
 80035be:	580b      	ldrlt	r3, [r1, r0]
 80035c0:	18c0      	addlt	r0, r0, r3
 80035c2:	4770      	bx	lr

080035c4 <__retarget_lock_acquire_recursive>:
 80035c4:	4770      	bx	lr

080035c6 <__retarget_lock_release_recursive>:
 80035c6:	4770      	bx	lr

080035c8 <_init>:
 80035c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ca:	bf00      	nop
 80035cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035ce:	bc08      	pop	{r3}
 80035d0:	469e      	mov	lr, r3
 80035d2:	4770      	bx	lr

080035d4 <_fini>:
 80035d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035d6:	bf00      	nop
 80035d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035da:	bc08      	pop	{r3}
 80035dc:	469e      	mov	lr, r3
 80035de:	4770      	bx	lr
